{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 47, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/env.js"],"sourcesContent":["import { createEnv } from \"@t3-oss/env-nextjs\";\nimport { z } from \"zod\";\n\nexport const env = createEnv({\n  /**\n   * Specify your server-side environment variables schema here. This way you can ensure the app\n   * isn't built with invalid env vars.\n   */\n  server: {\n    DATABASE_URL: z.string().url(),\n    NODE_ENV: z\n      .enum([\"development\", \"test\", \"production\"])\n      .default(\"development\"),\n  },\n\n  /**\n   * Specify your client-side environment variables schema here. This way you can ensure the app\n   * isn't built with invalid env vars. To expose them to the client, prefix them with\n   * `NEXT_PUBLIC_`.\n   */\n  client: {\n    // NEXT_PUBLIC_CLIENTVAR: z.string(),\n  },\n\n  /**\n   * You can't destruct `process.env` as a regular object in the Next.js edge runtimes (e.g.\n   * middlewares) or client-side so we need to destruct manually.\n   */\n  runtimeEnv: {\n    DATABASE_URL: process.env.DATABASE_URL,\n    NODE_ENV: process.env.NODE_ENV,\n    // NEXT_PUBLIC_CLIENTVAR: process.env.NEXT_PUBLIC_CLIENTVAR,\n  },\n  /**\n   * Run `build` or `dev` with `SKIP_ENV_VALIDATION` to skip env validation. This is especially\n   * useful for Docker builds.\n   */\n  skipValidation: !!process.env.SKIP_ENV_VALIDATION,\n  /**\n   * Makes it so that empty strings are treated as undefined. `SOME_VAR: z.string()` and\n   * `SOME_VAR=''` will throw an error.\n   */\n  emptyStringAsUndefined: true,\n});\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,MAAM,MAAM,CAAA,GAAA,+JAAA,CAAA,YAAS,AAAD,EAAE;IAC3B;;;GAGC,GACD,QAAQ;QACN,cAAc,sIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG;QAC5B,UAAU,sIAAA,CAAA,IAAC,CACR,IAAI,CAAC;YAAC;YAAe;YAAQ;SAAa,EAC1C,OAAO,CAAC;IACb;IAEA;;;;GAIC,GACD,QAAQ;IAER;IAEA;;;GAGC,GACD,YAAY;QACV,cAAc,QAAQ,GAAG,CAAC,YAAY;QACtC,QAAQ;IAEV;IACA;;;GAGC,GACD,gBAAgB,CAAC,CAAC,QAAQ,GAAG,CAAC,mBAAmB;IACjD;;;GAGC,GACD,wBAAwB;AAC1B"}},
    {"offset": {"line": 88, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 102, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/server/db.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\n\nimport { env } from \"@/env\";\n\nconst createPrismaClient = () =>\n  new PrismaClient({\n    log:\n      env.NODE_ENV === \"development\" ? [\"error\", \"warn\"] : [\"error\"],\n  });\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: ReturnType<typeof createPrismaClient> | undefined;\n};\n\nexport const db = globalForPrisma.prisma ?? createPrismaClient();\n\nif (env.NODE_ENV !== \"production\") globalForPrisma.prisma = db;\n"],"names":[],"mappings":";;;AAAA;AAEA;;;AAEA,MAAM,qBAAqB,IACzB,IAAI,2GAAA,CAAA,eAAY,CAAC;QACf,KACE,4GAAA,CAAA,MAAG,CAAC,QAAQ,KAAK,gBAAgB;YAAC;YAAS;SAAO,GAAG;YAAC;SAAQ;IAClE;AAEF,MAAM,kBAAkB;AAIjB,MAAM,KAAK,gBAAgB,MAAM,IAAI;AAE5C,IAAI,4GAAA,CAAA,MAAG,CAAC,QAAQ,KAAK,cAAc,gBAAgB,MAAM,GAAG"}},
    {"offset": {"line": 120, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 150, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/server/api/trpc.ts"],"sourcesContent":["/**\n * YOU PROBABLY DON'T NEED TO EDIT THIS FILE, UNLESS:\n * 1. You want to modify request context (see Part 1).\n * 2. You want to create a new middleware or type of procedure (see Part 3).\n *\n * TL;DR - This is where all the tRPC server stuff is created and plugged in. The pieces you will\n * need to use are documented accordingly near the end.\n */\nimport { initTRPC } from \"@trpc/server\";\nimport superjson from \"superjson\";\nimport { ZodError } from \"zod\";\n\nimport { db } from \"@/server/db\";\nimport { auth } from \"@clerk/nextjs/server\";\n\n/**\n * 1. CONTEXT\n *\n * This section defines the \"contexts\" that are available in the backend API.\n *\n * These allow you to access things when processing a request, like the database, the session, etc.\n *\n * This helper generates the \"internals\" for a tRPC context. The API handler and RSC clients each\n * wrap this and provides the required context.\n *\n * @see https://trpc.io/docs/server/context\n */\nexport const createTRPCContext = async (opts: { headers: Headers }) => {\n  return {\n    db,\n    ...opts,\n  };\n};\n\n/**\n * 2. INITIALIZATION\n *\n * This is where the tRPC API is initialized, connecting the context and transformer. We also parse\n * ZodErrors so that you get typesafety on the frontend if your procedure fails due to validation\n * errors on the backend.\n */\nconst t = initTRPC.context<typeof createTRPCContext>().create({\n  transformer: superjson,\n  errorFormatter({ shape, error }) {\n    return {\n      ...shape,\n      data: {\n        ...shape.data,\n        zodError:\n          error.cause instanceof ZodError ? error.cause.flatten() : null,\n      },\n    };\n  },\n});\n\n/**\n * Create a server-side caller.\n *\n * @see https://trpc.io/docs/server/server-side-calls\n */\nexport const createCallerFactory = t.createCallerFactory;\n\n/**\n * 3. ROUTER & PROCEDURE (THE IMPORTANT BIT)\n *\n * These are the pieces you use to build your tRPC API. You should import these a lot in the\n * \"/src/server/api/routers\" directory.\n */\n\n/**\n * This is how you create new routers and sub-routers in your tRPC API.\n *\n * @see https://trpc.io/docs/router\n */\nexport const createTRPCRouter = t.router;\n\n/**\n * Middleware for timing procedure execution and adding an artificial delay in development.\n *\n * You can remove this if you don't like it, but it can help catch unwanted waterfalls by simulating\n * network latency that would occur in production but not in local development.\n */\n\nconst isAuthenticated = t.middleware(async ({ next, ctx }) => {\n  const user = await auth()\n  if (!user) {\n    throw new Error(\"Unauthorized\");\n  }\n  return next({ ctx: { ...ctx, user: user as Required<typeof user> } })\n})\n\nconst timingMiddleware = t.middleware(async ({ next, path }) => {\n  const start = Date.now();\n\n  if (t._config.isDev) {\n    // artificial delay in dev\n    const waitMs = Math.floor(Math.random() * 400) + 100;\n    await new Promise((resolve) => setTimeout(resolve, waitMs));\n  }\n\n  const result = await next();\n\n  const end = Date.now();\n  console.log(`[TRPC] ${path} took ${end - start}ms to execute`);\n\n  return result;\n});\n\n/**\n * Public (unauthenticated) procedure\n *\n * This is the base piece you use to build new queries and mutations on your tRPC API. It does not\n * guarantee that a user querying is authorized, but you can still access user session data if they\n * are logged in.\n */\nexport const publicProcedure = t.procedure.use(timingMiddleware);\nexport const protectedProcedure = t.procedure.use(isAuthenticated).use(timingMiddleware);\n"],"names":[],"mappings":"AAAA;;;;;;;CAOC;;;;;;;AACD;AACA;AAGA;AAJA;AAEA;AAGA;;;;;;AAcO,MAAM,oBAAoB,OAAO;IACtC,OAAO;QACL,IAAA,qHAAA,CAAA,KAAE;QACF,GAAG,IAAI;IACT;AACF;AAEA;;;;;;CAMC,GACD,MAAM,IAAI,kMAAA,CAAA,WAAQ,CAAC,OAAO,GAA6B,MAAM,CAAC;IAC5D,aAAa,4IAAA,CAAA,UAAS;IACtB,gBAAe,EAAE,KAAK,EAAE,KAAK,EAAE;QAC7B,OAAO;YACL,GAAG,KAAK;YACR,MAAM;gBACJ,GAAG,MAAM,IAAI;gBACb,UACE,MAAM,KAAK,YAAY,sIAAA,CAAA,WAAQ,GAAG,MAAM,KAAK,CAAC,OAAO,KAAK;YAC9D;QACF;IACF;AACF;AAOO,MAAM,sBAAsB,EAAE,mBAAmB;AAcjD,MAAM,mBAAmB,EAAE,MAAM;AAExC;;;;;CAKC,GAED,MAAM,kBAAkB,EAAE,UAAU,CAAC,OAAO,EAAE,IAAI,EAAE,GAAG,EAAE;IACvD,MAAM,OAAO,MAAM,CAAA,GAAA,qLAAA,CAAA,OAAI,AAAD;IACtB,IAAI,CAAC,MAAM;QACT,MAAM,IAAI,MAAM;IAClB;IACA,OAAO,KAAK;QAAE,KAAK;YAAE,GAAG,GAAG;YAAE,MAAM;QAA8B;IAAE;AACrE;AAEA,MAAM,mBAAmB,EAAE,UAAU,CAAC,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE;IACzD,MAAM,QAAQ,KAAK,GAAG;IAEtB,IAAI,EAAE,OAAO,CAAC,KAAK,EAAE;QACnB,0BAA0B;QAC1B,MAAM,SAAS,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK,OAAO;QACjD,MAAM,IAAI,QAAQ,CAAC,UAAY,WAAW,SAAS;IACrD;IAEA,MAAM,SAAS,MAAM;IAErB,MAAM,MAAM,KAAK,GAAG;IACpB,QAAQ,GAAG,CAAC,CAAC,OAAO,EAAE,KAAK,MAAM,EAAE,MAAM,MAAM,aAAa,CAAC;IAE7D,OAAO;AACT;AASO,MAAM,kBAAkB,EAAE,SAAS,CAAC,GAAG,CAAC;AACxC,MAAM,qBAAqB,EAAE,SAAS,CAAC,GAAG,CAAC,iBAAiB,GAAG,CAAC"}},
    {"offset": {"line": 232, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 238, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/lib/gemini.ts"],"sourcesContent":["import { loadGithubRepo } from \"./github-loader\";\n\nimport { GoogleGenerativeAI } from \"@google/generative-ai\";\n\n\n// Access your API key as an environment variable (see our Getting Started tutorial)\nconst genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY!);\nconst model = genAI.getGenerativeModel({ model: \"gemini-1.5-flash\" });\n\n\nexport const getEmbeddings = async (text: string) => {\n    // For embeddings, use the Text Embeddings model\n    const model = genAI.getGenerativeModel({ model: \"text-embedding-004\" });\n\n    const result = await model.embedContent(text);\n    const embedding = result.embedding;\n    return embedding.values as number[];\n}\n\n\nexport const getSummary = async (doc: Awaited<ReturnType<typeof loadGithubRepo>>[number]) => {\n    console.log(\"getting summary for\", doc.metadata.source);\n    const code = doc.pageContent.slice(0, 10000); // Limit to 10000 characters\n    const response = await model.generateContent([\n        `You are an intelligent senior software engineer who specialises in onboarding junior software engineers onto projects`,\n        `You are onboarding a junior software engineer and explaining to them the purpose of the ${doc.metadata.source} file\nHere is the code:\n---\n${code}\n---\n            Give a summary no more than 100 words of the code above`,\n    ]);\n\n\n    return response.response.text()\n}\n\nexport const aiSummariseCommit = async (diff: string) => {\n    const response = await model.generateContent([\n        `You are an expert programmer, and you are trying to summarize a git diff.\nReminders about the git diff format:\nFor every file, there are a few metadata lines, like (for example):\n\\`\\`\\`\ndiff --git a/lib/index.js b/lib/index.js\nindex aadf691..bfef603 100644\n--- a/lib/index.js\n+++ b/lib/index.js\n\\`\\`\\`\nThis means that \\`lib/index.js\\` was modified in this commit. Note that this is only an example.\nThen there is a specifier of the lines that were modified.\nA line starting with \\`+\\` means it was added.\nA line that starting with \\`-\\` means that line was deleted.\nA line that starts with neither \\`+\\` nor \\`-\\` is code given for context and better understanding.\nIt is not part of the diff.\n[...]\nEXAMPLE SUMMARY COMMENTS:\n\\`\\`\\`\n* Raised the amount of returned recordings from \\`10\\` to \\`100\\` [packages/server/recordings_api.ts], [packages/server/constants.ts]\n* Fixed a typo in the github action name [.github/workflows/gpt-commit-summarizer.yml]\n* Moved the \\`octokit\\` initialization to a separate file [src/octokit.ts], [src/index.ts]\n* Added an OpenAI API for completions [packages/utils/apis/openai.ts]\n* Lowered numeric tolerance for test files\n\\`\\`\\`\nMost commits will have less comments than this examples list.\nThe last comment does not include the file names,\nbecause there were more than two relevant files in the hypothetical commit.\nDo not include parts of the example in your summary.\nIt is given only as an example of appropriate comments.`,\n        `Please summarise the following diff file: \\n\\n${diff}`,\n    ]);\n\n    return response.response.text();\n};\n\n\n// const result = await getEmbeddings(\"The quick brown fox jumps over the lazy dog.\");\n// console.log(result.length);\n// const summary = await getSummary({\n//     metadata: { source: \"test.ts\" }, pageContent: `\n//     import { useState } from \"react\";\n//     const [count, setCount] = useState(0);\n//     function handleClick() {\n//         setCount(count + 1);\n//     }\n//     ` });\n// console.log(summary);\n"],"names":[],"mappings":";;;;;AAEA;;AAGA,oFAAoF;AACpF,MAAM,QAAQ,IAAI,gKAAA,CAAA,qBAAkB,CAAC,QAAQ,GAAG,CAAC,cAAc;AAC/D,MAAM,QAAQ,MAAM,kBAAkB,CAAC;IAAE,OAAO;AAAmB;AAG5D,MAAM,gBAAgB,OAAO;IAChC,gDAAgD;IAChD,MAAM,QAAQ,MAAM,kBAAkB,CAAC;QAAE,OAAO;IAAqB;IAErE,MAAM,SAAS,MAAM,MAAM,YAAY,CAAC;IACxC,MAAM,YAAY,OAAO,SAAS;IAClC,OAAO,UAAU,MAAM;AAC3B;AAGO,MAAM,aAAa,OAAO;IAC7B,QAAQ,GAAG,CAAC,uBAAuB,IAAI,QAAQ,CAAC,MAAM;IACtD,MAAM,OAAO,IAAI,WAAW,CAAC,KAAK,CAAC,GAAG,QAAQ,4BAA4B;IAC1E,MAAM,WAAW,MAAM,MAAM,eAAe,CAAC;QACzC,CAAC,qHAAqH,CAAC;QACvH,CAAC,wFAAwF,EAAE,IAAI,QAAQ,CAAC,MAAM,CAAC;;;AAGvH,EAAE,KAAK;;mEAE4D,CAAC;KAC/D;IAGD,OAAO,SAAS,QAAQ,CAAC,IAAI;AACjC;AAEO,MAAM,oBAAoB,OAAO;IACpC,MAAM,WAAW,MAAM,MAAM,eAAe,CAAC;QACzC,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;uDA4B8C,CAAC;QAChD,CAAC,8CAA8C,EAAE,MAAM;KAC1D;IAED,OAAO,SAAS,QAAQ,CAAC,IAAI;AACjC,GAGA,sFAAsF;CACtF,8BAA8B;CAC9B,qCAAqC;CACrC,sDAAsD;CACtD,wCAAwC;CACxC,6CAA6C;CAC7C,+BAA+B;CAC/B,+BAA+B;CAC/B,QAAQ;CACR,YAAY;CACZ,wBAAwB"}},
    {"offset": {"line": 318, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 428, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/lib/github.ts"],"sourcesContent":["import { db } from \"@/server/db\";\nimport axios from \"axios\";\nimport { Octokit } from \"octokit\";\nimport { aiSummariseCommit } from \"./gemini\";\n\nconst octokit = new Octokit({\n    auth: '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'\n});\n// id                 String   @id @default(cuid())\n// commitMessage      String\n// commitHash         String\n// commitAuthorName   String\n// commitAuthorAvatar String\n// commitDate         DateTime\n// summary            String\n\ntype response = {\n    commitHash: string;\n    commitMessage: string;\n    commitAuthorName: string;\n    commitAuthorAvatar: string;\n    commitDate: string;\n};\n\nexport const getCommitHashes = async (\n    githubUrl: string,\n): Promise<response[]> => {\n    const [owner, repo] = githubUrl.split(\"/\").slice(3, 5);\n    if (!owner || !repo) {\n        throw new Error(\"Invalid github url\")\n    }\n    const { data } = await octokit.rest.repos.listCommits({\n        owner,\n        repo,\n    })\n    //   need commit author, commit message, commit hash and commit time\n    const sortedCommits = data.sort(\n        (a: any, b: any) =>\n            new Date(b.commit.author.date).getTime() -\n            new Date(a.commit.author.date).getTime(),\n    ) as any[];\n\n    return sortedCommits.slice(0, 15).map((commit: any) => ({\n        commitHash: commit.sha as string,\n        commitMessage: commit.commit.message ?? \"\",\n        commitAuthorName: commit.commit?.author?.name ?? \"\",\n        commitAuthorAvatar: commit.author?.avatar_url ?? \"\",\n        commitDate: commit.commit?.author?.date ?? \"\",\n    }));\n};\n\nexport const pollRepo = async (projectId: string) => {\n    const { project, githubUrl } = await fetchProjectGitHubUrl(projectId);\n    const commitHases = await getCommitHashes(project?.githubUrl ?? \"\");\n    const unprocessedCommits = await filterUnprocessedCommits(projectId, commitHases);\n    const summariesResponse = await Promise.allSettled(\n        unprocessedCommits.map((hash) => {\n            return summariseCommit(githubUrl, hash.commitHash);\n        }),\n    );\n    const summaries = summariesResponse.map((summary) => {\n        if (summary.status === \"fulfilled\") {\n            return summary.value as string;\n        }\n    });\n    const commits = await db.commit.createMany({\n        data: summaries.map((summary, idx) => ({\n            projectId: projectId,\n            commitHash: unprocessedCommits[idx]!.commitHash,\n            summary: summary!,\n            commitAuthorName: unprocessedCommits[idx]!.commitAuthorName,\n            commitDate: unprocessedCommits[idx]!.commitDate,\n            commitMessage: unprocessedCommits[idx]!.commitMessage,\n            commitAuthorAvatar: unprocessedCommits[idx]!.commitAuthorAvatar,\n        })),\n    });\n    return commits;\n};\n\nasync function fetchProjectGitHubUrl(projectId: string) {\n    const project = await db.project.findUnique({\n        where: {\n            id: projectId\n        }, select: {\n            githubUrl: true\n        }\n    });\n    const githubUrl = project?.githubUrl ?? \"\";\n    return { project, githubUrl };\n}\n\nasync function summariseCommit(githubUrl: string, commitHash: string) {\n    const { data } = await axios.get(\n        `${githubUrl}/commit/${commitHash}.diff`,\n        {\n            headers: {\n                Accept: \"application/vnd.github.v3.diff\",\n            },\n        }\n    );\n    return await aiSummariseCommit(data) || \"\"\n}\n\nasync function filterUnprocessedCommits(projectId: string, commitHases: response[]) {\n    const processedCommits = await db.commit.findMany({\n        where: {\n            projectId: projectId,\n        },\n    });\n    const unprocessedCommits = commitHases.filter(\n        (hash) => !processedCommits.some((commit) => commit.commitHash === hash.commitHash)\n    );\n    return unprocessedCommits;\n}\n\n\n// const githubUrl = \"https://github.com/elliott-chong/normalhuman\"\n// const commitHases = await getCommitHashes(githubUrl);\n// const summaries = await Promise.allSettled(\n//     commitHases.map((hash) => summariseCommit(githubUrl, hash.commitHash))\n// )\n// console.log(summaries)"],"names":[],"mappings":"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"}},
    {"offset": {"line": 524, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 562, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/lib/openai.ts"],"sourcesContent":["import { OpenAI } from 'openai'\nimport { loadGithubRepo } from './github-loader'\n\nexport const openAI = new OpenAI({\n    apiKey: process.env.OPENAI_API_KEY,\n})\n\nexport const getSummary = async (doc: Awaited<ReturnType<typeof loadGithubRepo>>[number]) => {\n    console.log(\"getting summary for\", doc.metadata.source);\n    const code = doc.pageContent.slice(0, 10000); // Limit to 10000 characters\n\n    const response = await openAI.chat.completions.create({\n        model: \"gpt-4o-mini\",\n        messages: [\n            {\n                role: \"system\",\n                content: \"You are an intelligent senior software engineer who specialises in onboarding junior software engineers onto projects\",\n            },\n            {\n                role: \"user\",\n                content: `You are onboarding a junior software engineer and explaining to them the purpose of the ${doc.metadata.source} file\nHere is the code:\n---\n${code}\n---\nGive a summary no more than 100 words of the code above`,\n            },\n        ],\n    });\n\n    console.log(\"got back summary\", doc.metadata.source);\n    return response.choices[0]?.message.content;\n}\n\nexport const aiSummariseCommit = async (diff: string) => {\n    const response = await openAI.chat.completions.create({\n        model: \"gpt-4o-mini\",\n        messages: [\n            {\n                role: \"system\",\n                content: `You are an expert programmer, and you are trying to summarize a git diff.\nReminders about the git diff format:\nFor every file, there are a few metadata lines, like (for example):\n\\`\\`\\`\ndiff --git a/lib/index.js b/lib/index.js\nindex aadf691..bfef603 100644\n--- a/lib/index.js\n+++ b/lib/index.js\n\\`\\`\\`\nThis means that \\`lib/index.js\\` was modified in this commit. Note that this is only an example.\nThen there is a specifier of the lines that were modified.\nA line starting with \\`+\\` means it was added.\nA line that starting with \\`-\\` means that line was deleted.\nA line that starts with neither \\`+\\` nor \\`-\\` is code given for context and better understanding.\nIt is not part of the diff.\n[...]\nEXAMPLE SUMMARY COMMENTS:\n\\`\\`\\`\n* Raised the amount of returned recordings from \\`10\\` to \\`100\\` [packages/server/recordings_api.ts], [packages/server/constants.ts]\n* Fixed a typo in the github action name [.github/workflows/gpt-commit-summarizer.yml]\n* Moved the \\`octokit\\` initialization to a separate file [src/octokit.ts], [src/index.ts]\n* Added an OpenAI API for completions [packages/utils/apis/openai.ts]\n* Lowered numeric tolerance for test files\n\\`\\`\\`\nMost commits will have less comments than this examples list.\nThe last comment does not include the file names,\nbecause there were more than two relevant files in the hypothetical commit.\nDo not include parts of the example in your summary.\nIt is given only as an example of appropriate comments.`,\n            },\n            {\n                role: \"user\",\n                content: `Please summarise the following diff file: \\n\\n${diff}`,\n            },\n        ],\n    });\n\n    return response.choices[0]?.message.content;\n};\n\n\nexport const getEmbeddings = async (text: string) => {\n    const payload = text.replaceAll(\"\\n\", \" \");\n    const response = await openAI.embeddings.create({\n        model: \"text-embedding-ada-002\",\n        input: payload,\n    });\n    return response.data[0]?.embedding;\n}\n\n"],"names":[],"mappings":";;;;;;AAAA;;AAGO,MAAM,SAAS,IAAI,kIAAA,CAAA,SAAM,CAAC;IAC7B,QAAQ,QAAQ,GAAG,CAAC,cAAc;AACtC;AAEO,MAAM,aAAa,OAAO;IAC7B,QAAQ,GAAG,CAAC,uBAAuB,IAAI,QAAQ,CAAC,MAAM;IACtD,MAAM,OAAO,IAAI,WAAW,CAAC,KAAK,CAAC,GAAG,QAAQ,4BAA4B;IAE1E,MAAM,WAAW,MAAM,OAAO,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC;QAClD,OAAO;QACP,UAAU;YACN;gBACI,MAAM;gBACN,SAAS;YACb;YACA;gBACI,MAAM;gBACN,SAAS,CAAC,wFAAwF,EAAE,IAAI,QAAQ,CAAC,MAAM,CAAC;;;AAGxI,EAAE,KAAK;;uDAEgD,CAAC;YAC5C;SACH;IACL;IAEA,QAAQ,GAAG,CAAC,oBAAoB,IAAI,QAAQ,CAAC,MAAM;IACnD,OAAO,SAAS,OAAO,CAAC,EAAE,EAAE,QAAQ;AACxC;AAEO,MAAM,oBAAoB,OAAO;IACpC,MAAM,WAAW,MAAM,OAAO,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC;QAClD,OAAO;QACP,UAAU;YACN;gBACI,MAAM;gBACN,SAAS,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;uDA4B6B,CAAC;YAC5C;YACA;gBACI,MAAM;gBACN,SAAS,CAAC,8CAA8C,EAAE,MAAM;YACpE;SACH;IACL;IAEA,OAAO,SAAS,OAAO,CAAC,EAAE,EAAE,QAAQ;AACxC;AAGO,MAAM,gBAAgB,OAAO;IAChC,MAAM,UAAU,KAAK,UAAU,CAAC,MAAM;IACtC,MAAM,WAAW,MAAM,OAAO,UAAU,CAAC,MAAM,CAAC;QAC5C,OAAO;QACP,OAAO;IACX;IACA,OAAO,SAAS,IAAI,CAAC,EAAE,EAAE;AAC7B"}},
    {"offset": {"line": 649, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 655, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/lib/github-loader.ts"],"sourcesContent":["import { GithubRepoLoader } from \"@langchain/community/document_loaders/web/github\";\nimport pLimit from 'p-limit'\nimport { getEmbeddings } from \"./gemini\";\nimport { getSummary } from \"./openai\";\nimport { exit } from \"process\";\nimport { db } from \"@/server/db\";\nimport { Octokit } from \"octokit\";\nconst getFileCount = async (path: string, octokit: Octokit, githubOwner: string, githubRepo: string, acc: number = 0) => {\n    const { data } = await octokit.rest.repos.getContent({\n        owner: githubOwner,\n        repo: githubRepo,\n        path: path\n    })\n\n    if (!Array.isArray(data) && data.type === 'file') {\n        return acc + 1\n    }\n\n    if (Array.isArray(data)) {\n        let fileCount = 0\n        const directories: string[] = []\n\n        // Count files and collect directories in current level\n        for (const item of data) {\n            if (item.type === 'dir') {\n                directories.push(item.path)\n            } else {\n                fileCount += 1\n            }\n        }\n\n        // Process all directories at this level in parallel\n        if (directories.length > 0) {\n            const directoryCounts = await Promise.all(\n                directories.map(dirPath =>\n                    getFileCount(dirPath, octokit, githubOwner, githubRepo, 0)\n                )\n            )\n            fileCount += directoryCounts.reduce((sum, count) => sum + count, 0)\n        }\n\n        return acc + fileCount\n    }\n\n    return acc\n}\n\nexport const checkCredits = async (githubUrl: string, githubToken?: string) => {\n    const octokit = new Octokit({\n        auth: githubToken || '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',\n    });\n    const githubOwner = githubUrl.split('/')[3]\n    const githubRepo = githubUrl.split('/')[4]\n    if (!githubOwner || !githubRepo) return 0\n    const fileCount = await getFileCount('', octokit, githubOwner, githubRepo, 0)\n    return fileCount\n}\n\nexport const loadGithubRepo = async (githubUrl: string, githubToken?: string) => {\n    const loader = new GithubRepoLoader(\n        githubUrl,\n        {\n            branch: \"main\",\n            ignoreFiles: ['package-lock.json', 'bun.lockb'],\n            recursive: true,\n            // recursive: false,\n            accessToken: githubToken || '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',\n            unknown: \"warn\",\n            maxConcurrency: 5, // Defaults to 2\n        }\n    );\n    const docs = await loader.load();\n    return docs\n};\n\nexport const indexGithubRepo = async (projectId: string, githubUrl: string, githubToken?: string) => {\n    const docs = await loadGithubRepo(githubUrl, githubToken);\n    const allEmbeddings = await generateEmbeddings(docs)\n    const limit = pLimit(10);\n    await Promise.allSettled(\n        allEmbeddings.map((embedding, index) =>\n            limit(async () => {\n                console.log(`processing ${index} of ${allEmbeddings.length}`);\n                if (!embedding) throw new Error(\"embedding is null\");\n\n                // First, upsert the basic data\n                const sourceCodeEmbedding = await db.sourceCodeEmbedding.upsert({\n                    where: {\n                        projectId_fileName: {\n                            projectId,\n                            fileName: embedding.fileName\n                        }\n                    },\n                    update: {\n                        summary: embedding.summary,\n                        sourceCode: embedding.sourceCode,\n                    },\n                    create: {\n                        summary: embedding.summary,\n                        sourceCode: embedding.sourceCode,\n                        fileName: embedding.fileName,\n                        projectId,\n                    }\n                });\n\n                // Then, update the summaryEmbedding using raw SQL\n                await db.$executeRaw`\n                UPDATE \"SourceCodeEmbedding\"\n                SET \"summaryEmbedding\" = ${embedding.embeddings}::vector\n                WHERE id = ${sourceCodeEmbedding.id}\n            `;\n            })\n        )\n    )\n}\n\n\n\nasync function generateEmbeddings(docs: Awaited<ReturnType<typeof loadGithubRepo>>) {\n    return await Promise.all(docs.map(async (doc) => {\n        const summary = await getSummary(doc);\n        if (!summary) return null;\n        const embeddings = await getEmbeddings(summary);\n        return {\n            summary,\n            embeddings,\n            sourceCode: JSON.parse(JSON.stringify(doc.pageContent)),\n            fileName: doc.metadata.source,\n        };\n    }));\n}\n// console.log(\"done\")\n\n// const query = 'what env is needed for this project?'\n\n\n// const embedding = await getEmbeddings(query)\n// const vectorQuery = `[${embedding.join(',')}]`\n\n// const result = await db.$queryRaw`\n//   SELECT\n//     id,\n//     summary,\n//     1 - (\"summaryEmbedding\" <=> ${vectorQuery}::vector) as similarity\n//   FROM \"SourceCodeEmbedding\"\n//   where 1 - (\"summaryEmbedding\" <=> ${vectorQuery}::vector) > .5\n//   ORDER BY  similarity DESC\n//   LIMIT 10;\n// `\n// console.log(result)"],"names":[],"mappings":"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"}},
    {"offset": {"line": 789, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 795, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/server/api/routers/project.ts"],"sourcesContent":["import { z } from \"zod\";\n\nimport { createTRPCRouter, protectedProcedure } from \"@/server/api/trpc\";\nimport { pollRepo } from \"@/lib/github\";\nimport { checkCredits, indexGithubRepo, loadGithubRepo } from \"@/lib/github-loader\";\n\nexport const projectRouter = createTRPCRouter({\n  getMyCredits: protectedProcedure.query(async ({ ctx }) => {\n    const user = await ctx.db.user.findUnique({ where: { id: ctx.user.userId! } })\n    return user?.credits || 0\n  }),\n\n  checkCredits: protectedProcedure.input(z.object({ githubUrl: z.string().min(1), githubToken: z.string().optional() })).\n    mutation(async ({ ctx, input }) => {\n      const fileCount = await checkCredits(input.githubUrl, input.githubToken)\n      const user = await ctx.db.user.findUnique({ where: { id: ctx.user.userId! } })\n      return {\n        credits: user?.credits || 0,\n        fileCount,\n      }\n    }),\n\n  create: protectedProcedure\n    .input(z.object({ name: z.string().min(1), githubUrl: z.string().min(1), githubToken: z.string().optional() }))\n    .mutation(async ({ ctx, input }) => {\n\n      const user = await ctx.db.user.findUnique({ where: { id: ctx.user.userId! } })\n      if (!user) throw new Error(\"User not found\")\n      const currentCredits = user.credits || 0\n      const fileCount = await checkCredits(input.githubUrl, input.githubToken)\n      if (currentCredits < fileCount) throw new Error(\"Not enough credits\")\n\n      const project = await ctx.db.$transaction(async (tx) => {\n        const createdProject = await tx.project.create({\n          data: {\n            name: input.name,\n            githubUrl: input.githubUrl,\n          },\n        });\n\n        await tx.userToProject.create({\n          data: {\n            userId: ctx.user.userId!,\n            projectId: createdProject.id,\n          },\n        });\n\n        return createdProject;\n      });\n      await indexGithubRepo(project.id, input.githubUrl, input.githubToken);\n      await pollRepo(project.id)\n      await ctx.db.user.update({ where: { id: ctx.user.userId! }, data: { credits: { decrement: fileCount } } })\n      return project;\n    }),\n  archiveProject: protectedProcedure.input(z.object({ projectId: z.string() })).mutation(async ({ ctx, input }) => {\n    await ctx.db.project.update({ where: { id: input.projectId }, data: { deletedAt: new Date() } });\n  }),\n  getAll: protectedProcedure.query(async ({ ctx }) => {\n    return await ctx.db.project.findMany({\n      where: {\n        userToProjects: { some: { userId: ctx.user.userId! } },\n        deletedAt: null,\n      },\n    });\n  }),\n  getCommits: protectedProcedure.input(z.object({ projectId: z.string() })).query(async ({ ctx, input }) => {\n    pollRepo(input.projectId).then((commits) => {\n      console.log(`polled ${commits.count} commits`)\n    }).catch(console.error)\n    return await ctx.db.commit.findMany({\n      where: { projectId: input.projectId },\n    });\n  }),\n  getAllMeetings: protectedProcedure.input(z.object({ projectId: z.string() })).query(async ({ ctx, input }) => {\n    return await ctx.db.meeting.findMany({\n      where: { projectId: input.projectId },\n      include: {\n        issues: true,\n        createdBy: true,\n      },\n      orderBy: {\n        createdAt: 'desc'\n      }\n    });\n  }),\n  uploadMeeting: protectedProcedure.input(z.object({ projectId: z.string(), audio_url: z.string(), name: z.string() })).mutation(async ({ ctx, input }) => {\n    const meeting = await ctx.db.meeting.create({\n      data: {\n        projectId: input.projectId,\n        url: input.audio_url,\n        name: input.name,\n        createdById: ctx.user.userId!,\n      },\n    });\n    return meeting;\n  }),\n  deleteMeeting: protectedProcedure.input(z.object({ meetingId: z.string() })).mutation(async ({ ctx, input }) => {\n    await ctx.db.meeting.delete({ where: { id: input.meetingId } });\n  }),\n  getMembers: protectedProcedure.input(z.object({ projectId: z.string() })).query(async ({ ctx, input }) => {\n    return await ctx.db.userToProject.findMany({ where: { projectId: input.projectId }, include: { user: true } });\n  }),\n  getStripeTransactions: protectedProcedure.query(async ({ ctx }) => {\n    return await ctx.db.stripeTransaction.findMany({ where: { userId: ctx.user.userId! } });\n  }),\n});\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 969, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 975, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/server/api/routers/question.ts"],"sourcesContent":["import { z } from \"zod\";\n\nimport { createTRPCRouter, protectedProcedure, publicProcedure } from \"@/server/api/trpc\";\n\nexport const questionRouter = createTRPCRouter({\n    saveAnswer: protectedProcedure\n        .input(z.object({ projectId: z.string(), question: z.string().min(1), answer: z.string().min(1), filesReferenced: z.array(z.object({ fileName: z.string().min(1), sourceCode: z.string().min(1) })).optional() }))\n        .mutation(async ({ ctx, input }) => {\n            await ctx.db.question.create({\n                data: {\n                    question: input.question,\n                    answer: input.answer,\n                    projectId: input.projectId,\n                    userId: ctx.user.userId!,\n                    filesReferenced: input.filesReferenced\n                }\n            })\n        }),\n    getAllQuestions: protectedProcedure\n        .input(z.object({ projectId: z.string() }))\n        .query(async ({ ctx, input }) => {\n            return await ctx.db.question.findMany({ where: { projectId: input.projectId }, include: { user: true }, orderBy: { createdAt: 'desc' } })\n        })\n});\n"],"names":[],"mappings":";;;AAEA;AAFA;;;AAIO,MAAM,iBAAiB,CAAA,GAAA,8HAAA,CAAA,mBAAgB,AAAD,EAAE;IAC3C,YAAY,8HAAA,CAAA,qBAAkB,CACzB,KAAK,CAAC,sIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QAAE,WAAW,sIAAA,CAAA,IAAC,CAAC,MAAM;QAAI,UAAU,sIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC;QAAI,QAAQ,sIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC;QAAI,iBAAiB,sIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,sIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;YAAE,UAAU,sIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC;YAAI,YAAY,sIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC;QAAG,IAAI,QAAQ;IAAG,IAC9M,QAAQ,CAAC,OAAO,EAAE,GAAG,EAAE,KAAK,EAAE;QAC3B,MAAM,IAAI,EAAE,CAAC,QAAQ,CAAC,MAAM,CAAC;YACzB,MAAM;gBACF,UAAU,MAAM,QAAQ;gBACxB,QAAQ,MAAM,MAAM;gBACpB,WAAW,MAAM,SAAS;gBAC1B,QAAQ,IAAI,IAAI,CAAC,MAAM;gBACvB,iBAAiB,MAAM,eAAe;YAC1C;QACJ;IACJ;IACJ,iBAAiB,8HAAA,CAAA,qBAAkB,CAC9B,KAAK,CAAC,sIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QAAE,WAAW,sIAAA,CAAA,IAAC,CAAC,MAAM;IAAG,IACvC,KAAK,CAAC,OAAO,EAAE,GAAG,EAAE,KAAK,EAAE;QACxB,OAAO,MAAM,IAAI,EAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC;YAAE,OAAO;gBAAE,WAAW,MAAM,SAAS;YAAC;YAAG,SAAS;gBAAE,MAAM;YAAK;YAAG,SAAS;gBAAE,WAAW;YAAO;QAAE;IAC3I;AACR"}},
    {"offset": {"line": 1018, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1024, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/server/api/routers/meeting.ts"],"sourcesContent":["import { z } from \"zod\";\nimport { createTRPCRouter, protectedProcedure } from \"../trpc\";\n\nexport const meetingRouter = createTRPCRouter({\n    getMeetingDetails: protectedProcedure.input(z.object({ meetingId: z.string() })).query(async ({ ctx, input }) => {\n        return await ctx.db.meeting.findUnique({\n            where: { id: input.meetingId }, include: {\n                issues: true\n            }\n        });\n    }),\n    askIssue: protectedProcedure.input(z.object({ issueId: z.string(), query: z.string() })).mutation(async ({ ctx, input }) => {\n        // return await ctx.db.issue.findUnique({ where: { id: input.issueId } });\n        return { answer: \"Hello\" }\n    }),\n});\n"],"names":[],"mappings":";;;AACA;AADA;;;AAGO,MAAM,gBAAgB,CAAA,GAAA,8HAAA,CAAA,mBAAgB,AAAD,EAAE;IAC1C,mBAAmB,8HAAA,CAAA,qBAAkB,CAAC,KAAK,CAAC,sIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QAAE,WAAW,sIAAA,CAAA,IAAC,CAAC,MAAM;IAAG,IAAI,KAAK,CAAC,OAAO,EAAE,GAAG,EAAE,KAAK,EAAE;QACxG,OAAO,MAAM,IAAI,EAAE,CAAC,OAAO,CAAC,UAAU,CAAC;YACnC,OAAO;gBAAE,IAAI,MAAM,SAAS;YAAC;YAAG,SAAS;gBACrC,QAAQ;YACZ;QACJ;IACJ;IACA,UAAU,8HAAA,CAAA,qBAAkB,CAAC,KAAK,CAAC,sIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QAAE,SAAS,sIAAA,CAAA,IAAC,CAAC,MAAM;QAAI,OAAO,sIAAA,CAAA,IAAC,CAAC,MAAM;IAAG,IAAI,QAAQ,CAAC,OAAO,EAAE,GAAG,EAAE,KAAK,EAAE;QACnH,0EAA0E;QAC1E,OAAO;YAAE,QAAQ;QAAQ;IAC7B;AACJ"}},
    {"offset": {"line": 1054, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1060, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/server/api/root.ts"],"sourcesContent":["import { createCallerFactory, createTRPCRouter } from \"@/server/api/trpc\";\nimport { projectRouter } from \"./routers/project\";\nimport { questionRouter } from \"./routers/question\";\nimport { meetingRouter } from \"./routers/meeting\";\n\n/**\n * This is the primary router for your server.\n *\n * All routers added in /api/routers should be manually added here.\n */\nexport const appRouter = createTRPCRouter({\n  project: projectRouter,\n  question: questionRouter,\n  meeting: meetingRouter\n});\n\n// export type definition of API\nexport type AppRouter = typeof appRouter;\n\n/**\n * Create a server-side caller for the tRPC API.\n * @example\n * const trpc = createCaller(createContext);\n * const res = await trpc.post.all();\n *       ^? Post[]\n */\nexport const createCaller = createCallerFactory(appRouter);\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;;;;;AAOO,MAAM,YAAY,CAAA,GAAA,8HAAA,CAAA,mBAAgB,AAAD,EAAE;IACxC,SAAS,4IAAA,CAAA,gBAAa;IACtB,UAAU,6IAAA,CAAA,iBAAc;IACxB,SAAS,4IAAA,CAAA,gBAAa;AACxB;AAYO,MAAM,eAAe,CAAA,GAAA,8HAAA,CAAA,sBAAmB,AAAD,EAAE"}},
    {"offset": {"line": 1078, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1084, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/app/api/trpc/[trpc]/route.ts"],"sourcesContent":["import { fetchRequestHandler } from \"@trpc/server/adapters/fetch\";\nimport { type NextRequest } from \"next/server\";\n\nimport { env } from \"@/env\";\nimport { appRouter } from \"@/server/api/root\";\nimport { createTRPCContext } from \"@/server/api/trpc\";\n\nexport const maxDuration = 300;\n\n/**\n * This wraps the `createTRPCContext` helper and provides the required context for the tRPC API when\n * handling a HTTP request (e.g. when you make requests from Client Components).\n */\nconst createContext = async (req: NextRequest) => {\n  return createTRPCContext({\n    headers: req.headers,\n  });\n};\n\nconst handler = (req: NextRequest) =>\n  fetchRequestHandler({\n    endpoint: \"/api/trpc\",\n    req,\n    router: appRouter,\n    createContext: () => createContext(req),\n    onError:\n      env.NODE_ENV === \"development\"\n        ? ({ path, error }) => {\n          console.error(\n            `❌ tRPC failed on ${path ?? \"<no-path>\"}: ${error.message}`\n          );\n        }\n        : undefined,\n  });\n\nexport { handler as GET, handler as POST };\n"],"names":[],"mappings":";;;;;AAAA;AAGA;AACA;AACA;AALA;;;;;AAOO,MAAM,cAAc;AAE3B;;;CAGC,GACD,MAAM,gBAAgB,OAAO;IAC3B,OAAO,CAAA,GAAA,8HAAA,CAAA,oBAAiB,AAAD,EAAE;QACvB,SAAS,IAAI,OAAO;IACtB;AACF;AAEA,MAAM,UAAU,CAAC,MACf,CAAA,GAAA,uLAAA,CAAA,sBAAmB,AAAD,EAAE;QAClB,UAAU;QACV;QACA,QAAQ,8HAAA,CAAA,YAAS;QACjB,eAAe,IAAM,cAAc;QACnC,SACE,4GAAA,CAAA,MAAG,CAAC,QAAQ,KAAK,gBACb,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE;YAChB,QAAQ,KAAK,CACX,CAAC,iBAAiB,EAAE,QAAQ,YAAY,EAAE,EAAE,MAAM,OAAO,EAAE;QAE/D,IACE;IACR"}},
    {"offset": {"line": 1117, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}