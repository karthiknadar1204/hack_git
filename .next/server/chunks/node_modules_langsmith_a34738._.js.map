{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/node_modules/langsmith/dist/singletons/fetch.js"],"sourcesContent":["// Wrap the default fetch call due to issues with illegal invocations\n// in some environments:\n// https://stackoverflow.com/questions/69876859/why-does-bind-fix-failed-to-execute-fetch-on-window-illegal-invocation-err\n// @ts-expect-error Broad typing to support a range of fetch implementations\nconst DEFAULT_FETCH_IMPLEMENTATION = (...args) => fetch(...args);\nconst LANGSMITH_FETCH_IMPLEMENTATION_KEY = Symbol.for(\"ls:fetch_implementation\");\n/**\n * Overrides the fetch implementation used for LangSmith calls.\n * You should use this if you need to use an implementation of fetch\n * other than the default global (e.g. for dealing with proxies).\n * @param fetch The new fetch functino to use.\n */\nexport const overrideFetchImplementation = (fetch) => {\n    globalThis[LANGSMITH_FETCH_IMPLEMENTATION_KEY] = fetch;\n};\n/**\n * @internal\n */\nexport const _getFetchImplementation = () => {\n    return (globalThis[LANGSMITH_FETCH_IMPLEMENTATION_KEY] ??\n        DEFAULT_FETCH_IMPLEMENTATION);\n};\n"],"names":[],"mappings":"AAAA,qEAAqE;AACrE,wBAAwB;AACxB,0HAA0H;AAC1H,4EAA4E;;;;;AAC5E,MAAM,+BAA+B,CAAC,GAAG,OAAS,SAAS;AAC3D,MAAM,qCAAqC,OAAO,GAAG,CAAC;AAO/C,MAAM,8BAA8B,CAAC;IACxC,UAAU,CAAC,mCAAmC,GAAG;AACrD;AAIO,MAAM,0BAA0B;IACnC,OAAQ,UAAU,CAAC,mCAAmC,IAClD;AACR","ignoreList":[0]}},
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 29, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/node_modules/langsmith/dist/utils/async_caller.js"],"sourcesContent":["import pRetry from \"p-retry\";\nimport PQueueMod from \"p-queue\";\nimport { _getFetchImplementation } from \"../singletons/fetch.js\";\nconst STATUS_NO_RETRY = [\n    400, // Bad Request\n    401, // Unauthorized\n    403, // Forbidden\n    404, // Not Found\n    405, // Method Not Allowed\n    406, // Not Acceptable\n    407, // Proxy Authentication Required\n    408, // Request Timeout\n];\nconst STATUS_IGNORE = [\n    409, // Conflict\n];\n/**\n * A class that can be used to make async calls with concurrency and retry logic.\n *\n * This is useful for making calls to any kind of \"expensive\" external resource,\n * be it because it's rate-limited, subject to network issues, etc.\n *\n * Concurrent calls are limited by the `maxConcurrency` parameter, which defaults\n * to `Infinity`. This means that by default, all calls will be made in parallel.\n *\n * Retries are limited by the `maxRetries` parameter, which defaults to 6. This\n * means that by default, each call will be retried up to 6 times, with an\n * exponential backoff between each attempt.\n */\nexport class AsyncCaller {\n    constructor(params) {\n        Object.defineProperty(this, \"maxConcurrency\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"maxRetries\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"queue\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"onFailedResponseHook\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.maxConcurrency = params.maxConcurrency ?? Infinity;\n        this.maxRetries = params.maxRetries ?? 6;\n        if (\"default\" in PQueueMod) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            this.queue = new PQueueMod.default({\n                concurrency: this.maxConcurrency,\n            });\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            this.queue = new PQueueMod({ concurrency: this.maxConcurrency });\n        }\n        this.onFailedResponseHook = params?.onFailedResponseHook;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    call(callable, ...args) {\n        const onFailedResponseHook = this.onFailedResponseHook;\n        return this.queue.add(() => pRetry(() => callable(...args).catch((error) => {\n            // eslint-disable-next-line no-instanceof/no-instanceof\n            if (error instanceof Error) {\n                throw error;\n            }\n            else {\n                throw new Error(error);\n            }\n        }), {\n            async onFailedAttempt(error) {\n                if (error.message.startsWith(\"Cancel\") ||\n                    error.message.startsWith(\"TimeoutError\") ||\n                    error.message.startsWith(\"AbortError\")) {\n                    throw error;\n                }\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                if (error?.code === \"ECONNABORTED\") {\n                    throw error;\n                }\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                const response = error?.response;\n                const status = response?.status;\n                if (status) {\n                    if (STATUS_NO_RETRY.includes(+status)) {\n                        throw error;\n                    }\n                    else if (STATUS_IGNORE.includes(+status)) {\n                        return;\n                    }\n                    if (onFailedResponseHook) {\n                        await onFailedResponseHook(response);\n                    }\n                }\n            },\n            // If needed we can change some of the defaults here,\n            // but they're quite sensible.\n            retries: this.maxRetries,\n            randomize: true,\n        }), { throwOnTimeout: true });\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    callWithOptions(options, callable, ...args) {\n        // Note this doesn't cancel the underlying request,\n        // when available prefer to use the signal option of the underlying call\n        if (options.signal) {\n            return Promise.race([\n                this.call(callable, ...args),\n                new Promise((_, reject) => {\n                    options.signal?.addEventListener(\"abort\", () => {\n                        reject(new Error(\"AbortError\"));\n                    });\n                }),\n            ]);\n        }\n        return this.call(callable, ...args);\n    }\n    fetch(...args) {\n        return this.call(() => _getFetchImplementation()(...args).then((res) => res.ok ? res : Promise.reject(res)));\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 153, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 159, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/node_modules/langsmith/dist/utils/messages.js"],"sourcesContent":["export function isLangChainMessage(\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nmessage) {\n    return typeof message?._getType === \"function\";\n}\nexport function convertLangChainMessageToExample(message) {\n    const converted = {\n        type: message._getType(),\n        data: { content: message.content },\n    };\n    // Check for presence of keys in additional_kwargs\n    if (message?.additional_kwargs &&\n        Object.keys(message.additional_kwargs).length > 0) {\n        converted.data.additional_kwargs = { ...message.additional_kwargs };\n    }\n    return converted;\n}\n"],"names":[],"mappings":";;;;AAAO,SAAS,mBAChB,8DAA8D;AAC9D,OAAO;IACH,OAAO,OAAO,SAAS,aAAa;AACxC;AACO,SAAS,iCAAiC,OAAO;IACpD,MAAM,YAAY;QACd,MAAM,QAAQ,QAAQ;QACtB,MAAM;YAAE,SAAS,QAAQ,OAAO;QAAC;IACrC;IACA,kDAAkD;IAClD,IAAI,SAAS,qBACT,OAAO,IAAI,CAAC,QAAQ,iBAAiB,EAAE,MAAM,GAAG,GAAG;QACnD,UAAU,IAAI,CAAC,iBAAiB,GAAG;YAAE,GAAG,QAAQ,iBAAiB;QAAC;IACtE;IACA,OAAO;AACX","ignoreList":[0]}},
    {"offset": {"line": 182, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 188, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/node_modules/langsmith/dist/utils/_uuid.js"],"sourcesContent":["import * as uuid from \"uuid\";\nexport function assertUuid(str, which) {\n    if (!uuid.validate(str)) {\n        const msg = which !== undefined\n            ? `Invalid UUID for ${which}: ${str}`\n            : `Invalid UUID: ${str}`;\n        throw new Error(msg);\n    }\n    return str;\n}\n"],"names":[],"mappings":";;;AAAA;;AACO,SAAS,WAAW,GAAG,EAAE,KAAK;IACjC,IAAI,CAAC,uJAAK,QAAQ,CAAC,MAAM;QACrB,MAAM,MAAM,UAAU,YAChB,CAAC,iBAAiB,EAAE,MAAM,EAAE,EAAE,KAAK,GACnC,CAAC,cAAc,EAAE,KAAK;QAC5B,MAAM,IAAI,MAAM;IACpB;IACA,OAAO;AACX","ignoreList":[0]}},
    {"offset": {"line": 200, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 206, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/node_modules/langsmith/dist/utils/warn.js"],"sourcesContent":["const warnedMessages = {};\nexport function warnOnce(message) {\n    if (!warnedMessages[message]) {\n        console.warn(message);\n        warnedMessages[message] = true;\n    }\n}\n"],"names":[],"mappings":";;;AAAA,MAAM,iBAAiB,CAAC;AACjB,SAAS,SAAS,OAAO;IAC5B,IAAI,CAAC,cAAc,CAAC,QAAQ,EAAE;QAC1B,QAAQ,IAAI,CAAC;QACb,cAAc,CAAC,QAAQ,GAAG;IAC9B;AACJ","ignoreList":[0]}},
    {"offset": {"line": 216, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 222, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/node_modules/langsmith/dist/utils/prompts.js"],"sourcesContent":["import { parse as parseVersion } from \"semver\";\nexport function isVersionGreaterOrEqual(current_version, target_version) {\n    const current = parseVersion(current_version);\n    const target = parseVersion(target_version);\n    if (!current || !target) {\n        throw new Error(\"Invalid version format.\");\n    }\n    return current.compare(target) >= 0;\n}\nexport function parsePromptIdentifier(identifier) {\n    if (!identifier ||\n        identifier.split(\"/\").length > 2 ||\n        identifier.startsWith(\"/\") ||\n        identifier.endsWith(\"/\") ||\n        identifier.split(\":\").length > 2) {\n        throw new Error(`Invalid identifier format: ${identifier}`);\n    }\n    const [ownerNamePart, commitPart] = identifier.split(\":\");\n    const commit = commitPart || \"latest\";\n    if (ownerNamePart.includes(\"/\")) {\n        const [owner, name] = ownerNamePart.split(\"/\", 2);\n        if (!owner || !name) {\n            throw new Error(`Invalid identifier format: ${identifier}`);\n        }\n        return [owner, name, commit];\n    }\n    else {\n        if (!ownerNamePart) {\n            throw new Error(`Invalid identifier format: ${identifier}`);\n        }\n        return [\"-\", ownerNamePart, commit];\n    }\n}\n"],"names":[],"mappings":";;;;AAAA;;AACO,SAAS,wBAAwB,eAAe,EAAE,cAAc;IACnE,MAAM,UAAU,CAAA,GAAA,iIAAA,CAAA,QAAY,AAAD,EAAE;IAC7B,MAAM,SAAS,CAAA,GAAA,iIAAA,CAAA,QAAY,AAAD,EAAE;IAC5B,IAAI,CAAC,WAAW,CAAC,QAAQ;QACrB,MAAM,IAAI,MAAM;IACpB;IACA,OAAO,QAAQ,OAAO,CAAC,WAAW;AACtC;AACO,SAAS,sBAAsB,UAAU;IAC5C,IAAI,CAAC,cACD,WAAW,KAAK,CAAC,KAAK,MAAM,GAAG,KAC/B,WAAW,UAAU,CAAC,QACtB,WAAW,QAAQ,CAAC,QACpB,WAAW,KAAK,CAAC,KAAK,MAAM,GAAG,GAAG;QAClC,MAAM,IAAI,MAAM,CAAC,2BAA2B,EAAE,YAAY;IAC9D;IACA,MAAM,CAAC,eAAe,WAAW,GAAG,WAAW,KAAK,CAAC;IACrD,MAAM,SAAS,cAAc;IAC7B,IAAI,cAAc,QAAQ,CAAC,MAAM;QAC7B,MAAM,CAAC,OAAO,KAAK,GAAG,cAAc,KAAK,CAAC,KAAK;QAC/C,IAAI,CAAC,SAAS,CAAC,MAAM;YACjB,MAAM,IAAI,MAAM,CAAC,2BAA2B,EAAE,YAAY;QAC9D;QACA,OAAO;YAAC;YAAO;YAAM;SAAO;IAChC,OACK;QACD,IAAI,CAAC,eAAe;YAChB,MAAM,IAAI,MAAM,CAAC,2BAA2B,EAAE,YAAY;QAC9D;QACA,OAAO;YAAC;YAAK;YAAe;SAAO;IACvC;AACJ","ignoreList":[0]}},
    {"offset": {"line": 263, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 269, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/node_modules/langsmith/dist/utils/error.js"],"sourcesContent":["function getErrorStackTrace(e) {\n    if (typeof e !== \"object\" || e == null)\n        return undefined;\n    if (!(\"stack\" in e) || typeof e.stack !== \"string\")\n        return undefined;\n    let stack = e.stack;\n    const prevLine = `${e}`;\n    if (stack.startsWith(prevLine)) {\n        stack = stack.slice(prevLine.length);\n    }\n    if (stack.startsWith(\"\\n\")) {\n        stack = stack.slice(1);\n    }\n    return stack;\n}\nexport function printErrorStackTrace(e) {\n    const stack = getErrorStackTrace(e);\n    if (stack == null)\n        return;\n    console.error(stack);\n}\n/**\n * LangSmithConflictError\n *\n * Represents an error that occurs when there's a conflict during an operation,\n * typically corresponding to HTTP 409 status code responses.\n *\n * This error is thrown when an attempt to create or modify a resource conflicts\n * with the current state of the resource on the server. Common scenarios include:\n * - Attempting to create a resource that already exists\n * - Trying to update a resource that has been modified by another process\n * - Violating a uniqueness constraint in the data\n *\n * @extends Error\n *\n * @example\n * try {\n *   await createProject(\"existingProject\");\n * } catch (error) {\n *   if (error instanceof ConflictError) {\n *     console.log(\"A conflict occurred:\", error.message);\n *     // Handle the conflict, e.g., by suggesting a different project name\n *   } else {\n *     // Handle other types of errors\n *   }\n * }\n *\n * @property {string} name - Always set to 'ConflictError' for easy identification\n * @property {string} message - Detailed error message including server response\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/409\n */\nexport class LangSmithConflictError extends Error {\n    constructor(message) {\n        super(message);\n        this.name = \"LangSmithConflictError\";\n    }\n}\n/**\n * Throws an appropriate error based on the response status and body.\n *\n * @param response - The fetch Response object\n * @param context - Additional context to include in the error message (e.g., operation being performed)\n * @throws {LangSmithConflictError} When the response status is 409\n * @throws {Error} For all other non-ok responses\n */\nexport async function raiseForStatus(response, context, consume) {\n    // consume the response body to release the connection\n    // https://undici.nodejs.org/#/?id=garbage-collection\n    let errorBody;\n    if (response.ok) {\n        if (consume) {\n            errorBody = await response.text();\n        }\n        return;\n    }\n    errorBody = await response.text();\n    const fullMessage = `Failed to ${context}. Received status [${response.status}]: ${response.statusText}. Server response: ${errorBody}`;\n    if (response.status === 409) {\n        throw new LangSmithConflictError(fullMessage);\n    }\n    throw new Error(fullMessage);\n}\n"],"names":[],"mappings":";;;;;AAAA,SAAS,mBAAmB,CAAC;IACzB,IAAI,OAAO,MAAM,YAAY,KAAK,MAC9B,OAAO;IACX,IAAI,CAAC,CAAC,WAAW,CAAC,KAAK,OAAO,EAAE,KAAK,KAAK,UACtC,OAAO;IACX,IAAI,QAAQ,EAAE,KAAK;IACnB,MAAM,WAAW,GAAG,GAAG;IACvB,IAAI,MAAM,UAAU,CAAC,WAAW;QAC5B,QAAQ,MAAM,KAAK,CAAC,SAAS,MAAM;IACvC;IACA,IAAI,MAAM,UAAU,CAAC,OAAO;QACxB,QAAQ,MAAM,KAAK,CAAC;IACxB;IACA,OAAO;AACX;AACO,SAAS,qBAAqB,CAAC;IAClC,MAAM,QAAQ,mBAAmB;IACjC,IAAI,SAAS,MACT;IACJ,QAAQ,KAAK,CAAC;AAClB;AAgCO,MAAM,+BAA+B;IACxC,YAAY,OAAO,CAAE;QACjB,KAAK,CAAC;QACN,IAAI,CAAC,IAAI,GAAG;IAChB;AACJ;AASO,eAAe,eAAe,QAAQ,EAAE,OAAO,EAAE,OAAO;IAC3D,sDAAsD;IACtD,qDAAqD;IACrD,IAAI;IACJ,IAAI,SAAS,EAAE,EAAE;QACb,IAAI,SAAS;YACT,YAAY,MAAM,SAAS,IAAI;QACnC;QACA;IACJ;IACA,YAAY,MAAM,SAAS,IAAI;IAC/B,MAAM,cAAc,CAAC,UAAU,EAAE,QAAQ,mBAAmB,EAAE,SAAS,MAAM,CAAC,GAAG,EAAE,SAAS,UAAU,CAAC,mBAAmB,EAAE,WAAW;IACvI,IAAI,SAAS,MAAM,KAAK,KAAK;QACzB,MAAM,IAAI,uBAAuB;IACrC;IACA,MAAM,IAAI,MAAM;AACpB","ignoreList":[0]}},
    {"offset": {"line": 315, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 321, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/node_modules/langsmith/dist/utils/fast-safe-stringify/index.js"],"sourcesContent":["/* eslint-disable */\n// @ts-nocheck\nvar LIMIT_REPLACE_NODE = \"[...]\";\nvar CIRCULAR_REPLACE_NODE = { result: \"[Circular]\" };\nvar arr = [];\nvar replacerStack = [];\nfunction defaultOptions() {\n    return {\n        depthLimit: Number.MAX_SAFE_INTEGER,\n        edgesLimit: Number.MAX_SAFE_INTEGER,\n    };\n}\n// Regular stringify\nexport function stringify(obj, replacer, spacer, options) {\n    if (typeof options === \"undefined\") {\n        options = defaultOptions();\n    }\n    decirc(obj, \"\", 0, [], undefined, 0, options);\n    var res;\n    try {\n        if (replacerStack.length === 0) {\n            res = JSON.stringify(obj, replacer, spacer);\n        }\n        else {\n            res = JSON.stringify(obj, replaceGetterValues(replacer), spacer);\n        }\n    }\n    catch (_) {\n        return JSON.stringify(\"[unable to serialize, circular reference is too complex to analyze]\");\n    }\n    finally {\n        while (arr.length !== 0) {\n            var part = arr.pop();\n            if (part.length === 4) {\n                Object.defineProperty(part[0], part[1], part[3]);\n            }\n            else {\n                part[0][part[1]] = part[2];\n            }\n        }\n    }\n    return res;\n}\nfunction setReplace(replace, val, k, parent) {\n    var propertyDescriptor = Object.getOwnPropertyDescriptor(parent, k);\n    if (propertyDescriptor.get !== undefined) {\n        if (propertyDescriptor.configurable) {\n            Object.defineProperty(parent, k, { value: replace });\n            arr.push([parent, k, val, propertyDescriptor]);\n        }\n        else {\n            replacerStack.push([val, k, replace]);\n        }\n    }\n    else {\n        parent[k] = replace;\n        arr.push([parent, k, val]);\n    }\n}\nfunction decirc(val, k, edgeIndex, stack, parent, depth, options) {\n    depth += 1;\n    var i;\n    if (typeof val === \"object\" && val !== null) {\n        for (i = 0; i < stack.length; i++) {\n            if (stack[i] === val) {\n                setReplace(CIRCULAR_REPLACE_NODE, val, k, parent);\n                return;\n            }\n        }\n        if (typeof options.depthLimit !== \"undefined\" &&\n            depth > options.depthLimit) {\n            setReplace(LIMIT_REPLACE_NODE, val, k, parent);\n            return;\n        }\n        if (typeof options.edgesLimit !== \"undefined\" &&\n            edgeIndex + 1 > options.edgesLimit) {\n            setReplace(LIMIT_REPLACE_NODE, val, k, parent);\n            return;\n        }\n        stack.push(val);\n        // Optimize for Arrays. Big arrays could kill the performance otherwise!\n        if (Array.isArray(val)) {\n            for (i = 0; i < val.length; i++) {\n                decirc(val[i], i, i, stack, val, depth, options);\n            }\n        }\n        else {\n            var keys = Object.keys(val);\n            for (i = 0; i < keys.length; i++) {\n                var key = keys[i];\n                decirc(val[key], key, i, stack, val, depth, options);\n            }\n        }\n        stack.pop();\n    }\n}\n// Stable-stringify\nfunction compareFunction(a, b) {\n    if (a < b) {\n        return -1;\n    }\n    if (a > b) {\n        return 1;\n    }\n    return 0;\n}\nfunction deterministicStringify(obj, replacer, spacer, options) {\n    if (typeof options === \"undefined\") {\n        options = defaultOptions();\n    }\n    var tmp = deterministicDecirc(obj, \"\", 0, [], undefined, 0, options) || obj;\n    var res;\n    try {\n        if (replacerStack.length === 0) {\n            res = JSON.stringify(tmp, replacer, spacer);\n        }\n        else {\n            res = JSON.stringify(tmp, replaceGetterValues(replacer), spacer);\n        }\n    }\n    catch (_) {\n        return JSON.stringify(\"[unable to serialize, circular reference is too complex to analyze]\");\n    }\n    finally {\n        // Ensure that we restore the object as it was.\n        while (arr.length !== 0) {\n            var part = arr.pop();\n            if (part.length === 4) {\n                Object.defineProperty(part[0], part[1], part[3]);\n            }\n            else {\n                part[0][part[1]] = part[2];\n            }\n        }\n    }\n    return res;\n}\nfunction deterministicDecirc(val, k, edgeIndex, stack, parent, depth, options) {\n    depth += 1;\n    var i;\n    if (typeof val === \"object\" && val !== null) {\n        for (i = 0; i < stack.length; i++) {\n            if (stack[i] === val) {\n                setReplace(CIRCULAR_REPLACE_NODE, val, k, parent);\n                return;\n            }\n        }\n        try {\n            if (typeof val.toJSON === \"function\") {\n                return;\n            }\n        }\n        catch (_) {\n            return;\n        }\n        if (typeof options.depthLimit !== \"undefined\" &&\n            depth > options.depthLimit) {\n            setReplace(LIMIT_REPLACE_NODE, val, k, parent);\n            return;\n        }\n        if (typeof options.edgesLimit !== \"undefined\" &&\n            edgeIndex + 1 > options.edgesLimit) {\n            setReplace(LIMIT_REPLACE_NODE, val, k, parent);\n            return;\n        }\n        stack.push(val);\n        // Optimize for Arrays. Big arrays could kill the performance otherwise!\n        if (Array.isArray(val)) {\n            for (i = 0; i < val.length; i++) {\n                deterministicDecirc(val[i], i, i, stack, val, depth, options);\n            }\n        }\n        else {\n            // Create a temporary object in the required way\n            var tmp = {};\n            var keys = Object.keys(val).sort(compareFunction);\n            for (i = 0; i < keys.length; i++) {\n                var key = keys[i];\n                deterministicDecirc(val[key], key, i, stack, val, depth, options);\n                tmp[key] = val[key];\n            }\n            if (typeof parent !== \"undefined\") {\n                arr.push([parent, k, val]);\n                parent[k] = tmp;\n            }\n            else {\n                return tmp;\n            }\n        }\n        stack.pop();\n    }\n}\n// wraps replacer function to handle values we couldn't replace\n// and mark them as replaced value\nfunction replaceGetterValues(replacer) {\n    replacer =\n        typeof replacer !== \"undefined\"\n            ? replacer\n            : function (k, v) {\n                return v;\n            };\n    return function (key, val) {\n        if (replacerStack.length > 0) {\n            for (var i = 0; i < replacerStack.length; i++) {\n                var part = replacerStack[i];\n                if (part[1] === key && part[0] === val) {\n                    val = part[2];\n                    replacerStack.splice(i, 1);\n                    break;\n                }\n            }\n        }\n        return replacer.call(this, key, val);\n    };\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 537, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 543, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/node_modules/langsmith/dist/index.js"],"sourcesContent":["export { Client } from \"./client.js\";\nexport { RunTree } from \"./run_trees.js\";\nexport { overrideFetchImplementation } from \"./singletons/fetch.js\";\n// Update using yarn bump-version\nexport const __version__ = \"0.2.0\";\n"],"names":[],"mappings":";;;;;;AAIO,MAAM,cAAc","ignoreList":[0]}},
    {"offset": {"line": 550, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 556, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/node_modules/langsmith/dist/client.js"],"sourcesContent":["import * as uuid from \"uuid\";\nimport { AsyncCaller } from \"./utils/async_caller.js\";\nimport { convertLangChainMessageToExample, isLangChainMessage, } from \"./utils/messages.js\";\nimport { getEnvironmentVariable, getLangChainEnvVarsMetadata, getLangSmithEnvironmentVariable, getRuntimeEnvironment, } from \"./utils/env.js\";\nimport { __version__ } from \"./index.js\";\nimport { assertUuid } from \"./utils/_uuid.js\";\nimport { warnOnce } from \"./utils/warn.js\";\nimport { isVersionGreaterOrEqual, parsePromptIdentifier, } from \"./utils/prompts.js\";\nimport { raiseForStatus } from \"./utils/error.js\";\nimport { _getFetchImplementation } from \"./singletons/fetch.js\";\nimport { stringify as stringifyForTracing } from \"./utils/fast-safe-stringify/index.js\";\nexport function mergeRuntimeEnvIntoRunCreate(run) {\n    const runtimeEnv = getRuntimeEnvironment();\n    const envVars = getLangChainEnvVarsMetadata();\n    const extra = run.extra ?? {};\n    const metadata = extra.metadata;\n    run.extra = {\n        ...extra,\n        runtime: {\n            ...runtimeEnv,\n            ...extra?.runtime,\n        },\n        metadata: {\n            ...envVars,\n            ...(envVars.revision_id || run.revision_id\n                ? { revision_id: run.revision_id ?? envVars.revision_id }\n                : {}),\n            ...metadata,\n        },\n    };\n    return run;\n}\nconst getTracingSamplingRate = () => {\n    const samplingRateStr = getLangSmithEnvironmentVariable(\"TRACING_SAMPLING_RATE\");\n    if (samplingRateStr === undefined) {\n        return undefined;\n    }\n    const samplingRate = parseFloat(samplingRateStr);\n    if (samplingRate < 0 || samplingRate > 1) {\n        throw new Error(`LANGSMITH_TRACING_SAMPLING_RATE must be between 0 and 1 if set. Got: ${samplingRate}`);\n    }\n    return samplingRate;\n};\n// utility functions\nconst isLocalhost = (url) => {\n    const strippedUrl = url.replace(\"http://\", \"\").replace(\"https://\", \"\");\n    const hostname = strippedUrl.split(\"/\")[0].split(\":\")[0];\n    return (hostname === \"localhost\" || hostname === \"127.0.0.1\" || hostname === \"::1\");\n};\nasync function toArray(iterable) {\n    const result = [];\n    for await (const item of iterable) {\n        result.push(item);\n    }\n    return result;\n}\nfunction trimQuotes(str) {\n    if (str === undefined) {\n        return undefined;\n    }\n    return str\n        .trim()\n        .replace(/^\"(.*)\"$/, \"$1\")\n        .replace(/^'(.*)'$/, \"$1\");\n}\nconst handle429 = async (response) => {\n    if (response?.status === 429) {\n        const retryAfter = parseInt(response.headers.get(\"retry-after\") ?? \"30\", 10) * 1000;\n        if (retryAfter > 0) {\n            await new Promise((resolve) => setTimeout(resolve, retryAfter));\n            // Return directly after calling this check\n            return true;\n        }\n    }\n    // Fall back to existing status checks\n    return false;\n};\nexport class Queue {\n    constructor() {\n        Object.defineProperty(this, \"items\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        Object.defineProperty(this, \"sizeBytes\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n    }\n    peek() {\n        return this.items[0];\n    }\n    push(item) {\n        let itemPromiseResolve;\n        const itemPromise = new Promise((resolve) => {\n            // Setting itemPromiseResolve is synchronous with promise creation:\n            // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/Promise\n            itemPromiseResolve = resolve;\n        });\n        const size = stringifyForTracing(item.item).length;\n        this.items.push({\n            action: item.action,\n            payload: item.item,\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            itemPromiseResolve: itemPromiseResolve,\n            itemPromise,\n            size,\n        });\n        this.sizeBytes += size;\n        return itemPromise;\n    }\n    pop(upToSizeBytes) {\n        if (upToSizeBytes < 1) {\n            throw new Error(\"Number of bytes to pop off may not be less than 1.\");\n        }\n        const popped = [];\n        let poppedSizeBytes = 0;\n        // Pop items until we reach or exceed the size limit\n        while (poppedSizeBytes + (this.peek()?.size ?? 0) < upToSizeBytes &&\n            this.items.length > 0) {\n            const item = this.items.shift();\n            if (item) {\n                popped.push(item);\n                poppedSizeBytes += item.size;\n                this.sizeBytes -= item.size;\n            }\n        }\n        // If there is an item on the queue we were unable to pop,\n        // just return it as a single batch.\n        if (popped.length === 0 && this.items.length > 0) {\n            const item = this.items.shift();\n            popped.push(item);\n            poppedSizeBytes += item.size;\n            this.sizeBytes -= item.size;\n        }\n        return [\n            popped.map((it) => ({ action: it.action, item: it.payload })),\n            () => popped.forEach((it) => it.itemPromiseResolve()),\n        ];\n    }\n}\n// 20 MB\nexport const DEFAULT_BATCH_SIZE_LIMIT_BYTES = 20_971_520;\nconst SERVER_INFO_REQUEST_TIMEOUT = 1000;\nexport class Client {\n    constructor(config = {}) {\n        Object.defineProperty(this, \"apiKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"apiUrl\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"webUrl\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"caller\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"batchIngestCaller\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"timeout_ms\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_tenantId\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: null\n        });\n        Object.defineProperty(this, \"hideInputs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"hideOutputs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"tracingSampleRate\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"filteredPostUuids\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Set()\n        });\n        Object.defineProperty(this, \"autoBatchTracing\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"autoBatchQueue\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Queue()\n        });\n        Object.defineProperty(this, \"autoBatchTimeout\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"autoBatchInitialDelayMs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 250\n        });\n        Object.defineProperty(this, \"autoBatchAggregationDelayMs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 50\n        });\n        Object.defineProperty(this, \"batchSizeBytesLimit\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"fetchOptions\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"settings\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"blockOnRootRunFinalization\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: getEnvironmentVariable(\"LANGSMITH_TRACING_BACKGROUND\") === \"false\"\n        });\n        Object.defineProperty(this, \"traceBatchConcurrency\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 5\n        });\n        Object.defineProperty(this, \"_serverInfo\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        Object.defineProperty(this, \"_getServerInfoPromise\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        const defaultConfig = Client.getDefaultClientConfig();\n        this.tracingSampleRate = getTracingSamplingRate();\n        this.apiUrl = trimQuotes(config.apiUrl ?? defaultConfig.apiUrl) ?? \"\";\n        if (this.apiUrl.endsWith(\"/\")) {\n            this.apiUrl = this.apiUrl.slice(0, -1);\n        }\n        this.apiKey = trimQuotes(config.apiKey ?? defaultConfig.apiKey);\n        this.webUrl = trimQuotes(config.webUrl ?? defaultConfig.webUrl);\n        if (this.webUrl?.endsWith(\"/\")) {\n            this.webUrl = this.webUrl.slice(0, -1);\n        }\n        this.timeout_ms = config.timeout_ms ?? 90_000;\n        this.caller = new AsyncCaller(config.callerOptions ?? {});\n        this.traceBatchConcurrency =\n            config.traceBatchConcurrency ?? this.traceBatchConcurrency;\n        if (this.traceBatchConcurrency < 1) {\n            throw new Error(\"Trace batch concurrency must be positive.\");\n        }\n        this.batchIngestCaller = new AsyncCaller({\n            maxRetries: 2,\n            maxConcurrency: this.traceBatchConcurrency,\n            ...(config.callerOptions ?? {}),\n            onFailedResponseHook: handle429,\n        });\n        this.hideInputs =\n            config.hideInputs ?? config.anonymizer ?? defaultConfig.hideInputs;\n        this.hideOutputs =\n            config.hideOutputs ?? config.anonymizer ?? defaultConfig.hideOutputs;\n        this.autoBatchTracing = config.autoBatchTracing ?? this.autoBatchTracing;\n        this.blockOnRootRunFinalization =\n            config.blockOnRootRunFinalization ?? this.blockOnRootRunFinalization;\n        this.batchSizeBytesLimit = config.batchSizeBytesLimit;\n        this.fetchOptions = config.fetchOptions || {};\n    }\n    static getDefaultClientConfig() {\n        const apiKey = getLangSmithEnvironmentVariable(\"API_KEY\");\n        const apiUrl = getLangSmithEnvironmentVariable(\"ENDPOINT\") ??\n            \"https://api.smith.langchain.com\";\n        const hideInputs = getLangSmithEnvironmentVariable(\"HIDE_INPUTS\") === \"true\";\n        const hideOutputs = getLangSmithEnvironmentVariable(\"HIDE_OUTPUTS\") === \"true\";\n        return {\n            apiUrl: apiUrl,\n            apiKey: apiKey,\n            webUrl: undefined,\n            hideInputs: hideInputs,\n            hideOutputs: hideOutputs,\n        };\n    }\n    getHostUrl() {\n        if (this.webUrl) {\n            return this.webUrl;\n        }\n        else if (isLocalhost(this.apiUrl)) {\n            this.webUrl = \"http://localhost:3000\";\n            return this.webUrl;\n        }\n        else if (this.apiUrl.includes(\"/api\") &&\n            !this.apiUrl.split(\".\", 1)[0].endsWith(\"api\")) {\n            this.webUrl = this.apiUrl.replace(\"/api\", \"\");\n            return this.webUrl;\n        }\n        else if (this.apiUrl.split(\".\", 1)[0].includes(\"dev\")) {\n            this.webUrl = \"https://dev.smith.langchain.com\";\n            return this.webUrl;\n        }\n        else if (this.apiUrl.split(\".\", 1)[0].includes(\"eu\")) {\n            this.webUrl = \"https://eu.smith.langchain.com\";\n            return this.webUrl;\n        }\n        else {\n            this.webUrl = \"https://smith.langchain.com\";\n            return this.webUrl;\n        }\n    }\n    get headers() {\n        const headers = {\n            \"User-Agent\": `langsmith-js/${__version__}`,\n        };\n        if (this.apiKey) {\n            headers[\"x-api-key\"] = `${this.apiKey}`;\n        }\n        return headers;\n    }\n    processInputs(inputs) {\n        if (this.hideInputs === false) {\n            return inputs;\n        }\n        if (this.hideInputs === true) {\n            return {};\n        }\n        if (typeof this.hideInputs === \"function\") {\n            return this.hideInputs(inputs);\n        }\n        return inputs;\n    }\n    processOutputs(outputs) {\n        if (this.hideOutputs === false) {\n            return outputs;\n        }\n        if (this.hideOutputs === true) {\n            return {};\n        }\n        if (typeof this.hideOutputs === \"function\") {\n            return this.hideOutputs(outputs);\n        }\n        return outputs;\n    }\n    prepareRunCreateOrUpdateInputs(run) {\n        const runParams = { ...run };\n        if (runParams.inputs !== undefined) {\n            runParams.inputs = this.processInputs(runParams.inputs);\n        }\n        if (runParams.outputs !== undefined) {\n            runParams.outputs = this.processOutputs(runParams.outputs);\n        }\n        return runParams;\n    }\n    async _getResponse(path, queryParams) {\n        const paramsString = queryParams?.toString() ?? \"\";\n        const url = `${this.apiUrl}${path}?${paramsString}`;\n        const response = await this.caller.call(_getFetchImplementation(), url, {\n            method: \"GET\",\n            headers: this.headers,\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, `Failed to fetch ${path}`);\n        return response;\n    }\n    async _get(path, queryParams) {\n        const response = await this._getResponse(path, queryParams);\n        return response.json();\n    }\n    async *_getPaginated(path, queryParams = new URLSearchParams(), transform) {\n        let offset = Number(queryParams.get(\"offset\")) || 0;\n        const limit = Number(queryParams.get(\"limit\")) || 100;\n        while (true) {\n            queryParams.set(\"offset\", String(offset));\n            queryParams.set(\"limit\", String(limit));\n            const url = `${this.apiUrl}${path}?${queryParams}`;\n            const response = await this.caller.call(_getFetchImplementation(), url, {\n                method: \"GET\",\n                headers: this.headers,\n                signal: AbortSignal.timeout(this.timeout_ms),\n                ...this.fetchOptions,\n            });\n            await raiseForStatus(response, `Failed to fetch ${path}`);\n            const items = transform\n                ? transform(await response.json())\n                : await response.json();\n            if (items.length === 0) {\n                break;\n            }\n            yield items;\n            if (items.length < limit) {\n                break;\n            }\n            offset += items.length;\n        }\n    }\n    async *_getCursorPaginatedList(path, body = null, requestMethod = \"POST\", dataKey = \"runs\") {\n        const bodyParams = body ? { ...body } : {};\n        while (true) {\n            const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}${path}`, {\n                method: requestMethod,\n                headers: { ...this.headers, \"Content-Type\": \"application/json\" },\n                signal: AbortSignal.timeout(this.timeout_ms),\n                ...this.fetchOptions,\n                body: JSON.stringify(bodyParams),\n            });\n            const responseBody = await response.json();\n            if (!responseBody) {\n                break;\n            }\n            if (!responseBody[dataKey]) {\n                break;\n            }\n            yield responseBody[dataKey];\n            const cursors = responseBody.cursors;\n            if (!cursors) {\n                break;\n            }\n            if (!cursors.next) {\n                break;\n            }\n            bodyParams.cursor = cursors.next;\n        }\n    }\n    _filterForSampling(runs, patch = false) {\n        if (this.tracingSampleRate === undefined) {\n            return runs;\n        }\n        if (patch) {\n            const sampled = [];\n            for (const run of runs) {\n                if (!this.filteredPostUuids.has(run.id)) {\n                    sampled.push(run);\n                }\n                else {\n                    this.filteredPostUuids.delete(run.id);\n                }\n            }\n            return sampled;\n        }\n        else {\n            const sampled = [];\n            for (const run of runs) {\n                if ((run.id !== run.trace_id &&\n                    !this.filteredPostUuids.has(run.trace_id)) ||\n                    Math.random() < this.tracingSampleRate) {\n                    sampled.push(run);\n                }\n                else {\n                    this.filteredPostUuids.add(run.id);\n                }\n            }\n            return sampled;\n        }\n    }\n    async _getBatchSizeLimitBytes() {\n        const serverInfo = await this._ensureServerInfo();\n        return (this.batchSizeBytesLimit ??\n            serverInfo.batch_ingest_config?.size_limit_bytes ??\n            DEFAULT_BATCH_SIZE_LIMIT_BYTES);\n    }\n    async drainAutoBatchQueue() {\n        const batchSizeLimit = await this._getBatchSizeLimitBytes();\n        while (this.autoBatchQueue.items.length > 0) {\n            for (let i = 0; i < this.traceBatchConcurrency; i++) {\n                const [batch, done] = this.autoBatchQueue.pop(batchSizeLimit);\n                if (!batch.length) {\n                    done();\n                    break;\n                }\n                await this.processBatch(batch, done);\n            }\n        }\n    }\n    async processBatch(batch, done) {\n        if (!batch.length) {\n            done();\n            return;\n        }\n        try {\n            const ingestParams = {\n                runCreates: batch\n                    .filter((item) => item.action === \"create\")\n                    .map((item) => item.item),\n                runUpdates: batch\n                    .filter((item) => item.action === \"update\")\n                    .map((item) => item.item),\n            };\n            const serverInfo = await this._ensureServerInfo();\n            if (serverInfo?.batch_ingest_config?.use_multipart_endpoint) {\n                await this.multipartIngestRuns(ingestParams);\n            }\n            else {\n                await this.batchIngestRuns(ingestParams);\n            }\n        }\n        finally {\n            done();\n        }\n    }\n    async processRunOperation(item, immediatelyTriggerBatch) {\n        const oldTimeout = this.autoBatchTimeout;\n        clearTimeout(this.autoBatchTimeout);\n        this.autoBatchTimeout = undefined;\n        if (item.action === \"create\") {\n            item.item = mergeRuntimeEnvIntoRunCreate(item.item);\n        }\n        const itemPromise = this.autoBatchQueue.push(item);\n        const sizeLimitBytes = await this._getBatchSizeLimitBytes();\n        if (immediatelyTriggerBatch ||\n            this.autoBatchQueue.sizeBytes > sizeLimitBytes) {\n            await this.drainAutoBatchQueue().catch(console.error);\n        }\n        if (this.autoBatchQueue.items.length > 0) {\n            this.autoBatchTimeout = setTimeout(() => {\n                this.autoBatchTimeout = undefined;\n                // This error would happen in the background and is uncatchable\n                // from the outside. So just log instead.\n                void this.drainAutoBatchQueue().catch(console.error);\n            }, oldTimeout\n                ? this.autoBatchAggregationDelayMs\n                : this.autoBatchInitialDelayMs);\n        }\n        return itemPromise;\n    }\n    async _getServerInfo() {\n        const response = await _getFetchImplementation()(`${this.apiUrl}/info`, {\n            method: \"GET\",\n            headers: { Accept: \"application/json\" },\n            signal: AbortSignal.timeout(SERVER_INFO_REQUEST_TIMEOUT),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, \"get server info\");\n        return response.json();\n    }\n    async _ensureServerInfo() {\n        if (this._getServerInfoPromise === undefined) {\n            this._getServerInfoPromise = (async () => {\n                if (this._serverInfo === undefined) {\n                    try {\n                        this._serverInfo = await this._getServerInfo();\n                    }\n                    catch (e) {\n                        console.warn(`[WARNING]: LangSmith failed to fetch info on supported operations. Falling back to single calls and default limits.`);\n                    }\n                }\n                return this._serverInfo ?? {};\n            })();\n        }\n        return this._getServerInfoPromise.then((serverInfo) => {\n            if (this._serverInfo === undefined) {\n                this._getServerInfoPromise = undefined;\n            }\n            return serverInfo;\n        });\n    }\n    async _getSettings() {\n        if (!this.settings) {\n            this.settings = this._get(\"/settings\");\n        }\n        return await this.settings;\n    }\n    async createRun(run) {\n        if (!this._filterForSampling([run]).length) {\n            return;\n        }\n        const headers = { ...this.headers, \"Content-Type\": \"application/json\" };\n        const session_name = run.project_name;\n        delete run.project_name;\n        const runCreate = this.prepareRunCreateOrUpdateInputs({\n            session_name,\n            ...run,\n            start_time: run.start_time ?? Date.now(),\n        });\n        if (this.autoBatchTracing &&\n            runCreate.trace_id !== undefined &&\n            runCreate.dotted_order !== undefined) {\n            void this.processRunOperation({\n                action: \"create\",\n                item: runCreate,\n            }).catch(console.error);\n            return;\n        }\n        const mergedRunCreateParam = mergeRuntimeEnvIntoRunCreate(runCreate);\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/runs`, {\n            method: \"POST\",\n            headers,\n            body: stringifyForTracing(mergedRunCreateParam),\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, \"create run\", true);\n    }\n    /**\n     * Batch ingest/upsert multiple runs in the Langsmith system.\n     * @param runs\n     */\n    async batchIngestRuns({ runCreates, runUpdates, }) {\n        if (runCreates === undefined && runUpdates === undefined) {\n            return;\n        }\n        let preparedCreateParams = runCreates?.map((create) => this.prepareRunCreateOrUpdateInputs(create)) ?? [];\n        let preparedUpdateParams = runUpdates?.map((update) => this.prepareRunCreateOrUpdateInputs(update)) ?? [];\n        if (preparedCreateParams.length > 0 && preparedUpdateParams.length > 0) {\n            const createById = preparedCreateParams.reduce((params, run) => {\n                if (!run.id) {\n                    return params;\n                }\n                params[run.id] = run;\n                return params;\n            }, {});\n            const standaloneUpdates = [];\n            for (const updateParam of preparedUpdateParams) {\n                if (updateParam.id !== undefined && createById[updateParam.id]) {\n                    createById[updateParam.id] = {\n                        ...createById[updateParam.id],\n                        ...updateParam,\n                    };\n                }\n                else {\n                    standaloneUpdates.push(updateParam);\n                }\n            }\n            preparedCreateParams = Object.values(createById);\n            preparedUpdateParams = standaloneUpdates;\n        }\n        const rawBatch = {\n            post: this._filterForSampling(preparedCreateParams),\n            patch: this._filterForSampling(preparedUpdateParams, true),\n        };\n        if (!rawBatch.post.length && !rawBatch.patch.length) {\n            return;\n        }\n        const serverInfo = await this._ensureServerInfo();\n        if (serverInfo.version === undefined) {\n            this.autoBatchTracing = false;\n            for (const preparedCreateParam of rawBatch.post) {\n                await this.createRun(preparedCreateParam);\n            }\n            for (const preparedUpdateParam of rawBatch.patch) {\n                if (preparedUpdateParam.id !== undefined) {\n                    await this.updateRun(preparedUpdateParam.id, preparedUpdateParam);\n                }\n            }\n            return;\n        }\n        const batchChunks = {\n            post: [],\n            patch: [],\n        };\n        for (const k of [\"post\", \"patch\"]) {\n            const key = k;\n            const batchItems = rawBatch[key].reverse();\n            let batchItem = batchItems.pop();\n            while (batchItem !== undefined) {\n                batchChunks[key].push(batchItem);\n                batchItem = batchItems.pop();\n            }\n        }\n        if (batchChunks.post.length > 0 || batchChunks.patch.length > 0) {\n            await this._postBatchIngestRuns(stringifyForTracing(batchChunks));\n        }\n    }\n    async _postBatchIngestRuns(body) {\n        const headers = {\n            ...this.headers,\n            \"Content-Type\": \"application/json\",\n            Accept: \"application/json\",\n        };\n        const response = await this.batchIngestCaller.call(_getFetchImplementation(), `${this.apiUrl}/runs/batch`, {\n            method: \"POST\",\n            headers,\n            body: body,\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, \"batch create run\", true);\n    }\n    /**\n     * Batch ingest/upsert multiple runs in the Langsmith system.\n     * @param runs\n     */\n    async multipartIngestRuns({ runCreates, runUpdates, }) {\n        if (runCreates === undefined && runUpdates === undefined) {\n            return;\n        }\n        // transform and convert to dicts\n        const allAttachments = {};\n        let preparedCreateParams = [];\n        for (const create of runCreates ?? []) {\n            const preparedCreate = this.prepareRunCreateOrUpdateInputs(create);\n            if (preparedCreate.id !== undefined &&\n                preparedCreate.attachments !== undefined) {\n                allAttachments[preparedCreate.id] = preparedCreate.attachments;\n            }\n            delete preparedCreate.attachments;\n            preparedCreateParams.push(preparedCreate);\n        }\n        let preparedUpdateParams = [];\n        for (const update of runUpdates ?? []) {\n            preparedUpdateParams.push(this.prepareRunCreateOrUpdateInputs(update));\n        }\n        // require trace_id and dotted_order\n        const invalidRunCreate = preparedCreateParams.find((runCreate) => {\n            return (runCreate.trace_id === undefined || runCreate.dotted_order === undefined);\n        });\n        if (invalidRunCreate !== undefined) {\n            throw new Error(`Multipart ingest requires \"trace_id\" and \"dotted_order\" to be set when creating a run`);\n        }\n        const invalidRunUpdate = preparedUpdateParams.find((runUpdate) => {\n            return (runUpdate.trace_id === undefined || runUpdate.dotted_order === undefined);\n        });\n        if (invalidRunUpdate !== undefined) {\n            throw new Error(`Multipart ingest requires \"trace_id\" and \"dotted_order\" to be set when updating a run`);\n        }\n        // combine post and patch dicts where possible\n        if (preparedCreateParams.length > 0 && preparedUpdateParams.length > 0) {\n            const createById = preparedCreateParams.reduce((params, run) => {\n                if (!run.id) {\n                    return params;\n                }\n                params[run.id] = run;\n                return params;\n            }, {});\n            const standaloneUpdates = [];\n            for (const updateParam of preparedUpdateParams) {\n                if (updateParam.id !== undefined && createById[updateParam.id]) {\n                    createById[updateParam.id] = {\n                        ...createById[updateParam.id],\n                        ...updateParam,\n                    };\n                }\n                else {\n                    standaloneUpdates.push(updateParam);\n                }\n            }\n            preparedCreateParams = Object.values(createById);\n            preparedUpdateParams = standaloneUpdates;\n        }\n        if (preparedCreateParams.length === 0 &&\n            preparedUpdateParams.length === 0) {\n            return;\n        }\n        // send the runs in multipart requests\n        const accumulatedContext = [];\n        const accumulatedParts = [];\n        for (const [method, payloads] of [\n            [\"post\", preparedCreateParams],\n            [\"patch\", preparedUpdateParams],\n        ]) {\n            for (const originalPayload of payloads) {\n                // collect fields to be sent as separate parts\n                const { inputs, outputs, events, ...payload } = originalPayload;\n                const fields = { inputs, outputs, events };\n                // encode the main run payload\n                const stringifiedPayload = stringifyForTracing(payload);\n                accumulatedParts.push({\n                    name: `${method}.${payload.id}`,\n                    payload: new Blob([stringifiedPayload], {\n                        type: `application/json; length=${stringifiedPayload.length}`, // encoding=gzip\n                    }),\n                });\n                // encode the fields we collected\n                for (const [key, value] of Object.entries(fields)) {\n                    if (value === undefined) {\n                        continue;\n                    }\n                    const stringifiedValue = stringifyForTracing(value);\n                    accumulatedParts.push({\n                        name: `${method}.${payload.id}.${key}`,\n                        payload: new Blob([stringifiedValue], {\n                            type: `application/json; length=${stringifiedValue.length}`,\n                        }),\n                    });\n                }\n                // encode the attachments\n                if (payload.id !== undefined) {\n                    const attachments = allAttachments[payload.id];\n                    if (attachments) {\n                        delete allAttachments[payload.id];\n                        for (const [name, [contentType, content]] of Object.entries(attachments)) {\n                            accumulatedParts.push({\n                                name: `attachment.${payload.id}.${name}`,\n                                payload: new Blob([content], {\n                                    type: `${contentType}; length=${content.length}`,\n                                }),\n                            });\n                        }\n                    }\n                }\n                // compute context\n                accumulatedContext.push(`trace=${payload.trace_id},id=${payload.id}`);\n            }\n        }\n        await this._sendMultipartRequest(accumulatedParts, accumulatedContext.join(\"; \"));\n    }\n    async _sendMultipartRequest(parts, context) {\n        try {\n            const formData = new FormData();\n            for (const part of parts) {\n                formData.append(part.name, part.payload);\n            }\n            await this.batchIngestCaller.call(_getFetchImplementation(), `${this.apiUrl}/runs/multipart`, {\n                method: \"POST\",\n                headers: {\n                    ...this.headers,\n                },\n                body: formData,\n                signal: AbortSignal.timeout(this.timeout_ms),\n                ...this.fetchOptions,\n            });\n        }\n        catch (e) {\n            let errorMessage = \"Failed to multipart ingest runs\";\n            // eslint-disable-next-line no-instanceof/no-instanceof\n            if (e instanceof Error) {\n                errorMessage += `: ${e.stack || e.message}`;\n            }\n            else {\n                errorMessage += `: ${String(e)}`;\n            }\n            console.warn(`${errorMessage.trim()}\\n\\nContext: ${context}`);\n        }\n    }\n    async updateRun(runId, run) {\n        assertUuid(runId);\n        if (run.inputs) {\n            run.inputs = this.processInputs(run.inputs);\n        }\n        if (run.outputs) {\n            run.outputs = this.processOutputs(run.outputs);\n        }\n        // TODO: Untangle types\n        const data = { ...run, id: runId };\n        if (!this._filterForSampling([data], true).length) {\n            return;\n        }\n        if (this.autoBatchTracing &&\n            data.trace_id !== undefined &&\n            data.dotted_order !== undefined) {\n            if (run.end_time !== undefined &&\n                data.parent_run_id === undefined &&\n                this.blockOnRootRunFinalization) {\n                // Trigger a batch as soon as a root trace ends and block to ensure trace finishes\n                // in serverless environments.\n                await this.processRunOperation({ action: \"update\", item: data }, true);\n                return;\n            }\n            else {\n                void this.processRunOperation({ action: \"update\", item: data }).catch(console.error);\n            }\n            return;\n        }\n        const headers = { ...this.headers, \"Content-Type\": \"application/json\" };\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/runs/${runId}`, {\n            method: \"PATCH\",\n            headers,\n            body: stringifyForTracing(run),\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, \"update run\", true);\n    }\n    async readRun(runId, { loadChildRuns } = { loadChildRuns: false }) {\n        assertUuid(runId);\n        let run = await this._get(`/runs/${runId}`);\n        if (loadChildRuns && run.child_run_ids) {\n            run = await this._loadChildRuns(run);\n        }\n        return run;\n    }\n    async getRunUrl({ runId, run, projectOpts, }) {\n        if (run !== undefined) {\n            let sessionId;\n            if (run.session_id) {\n                sessionId = run.session_id;\n            }\n            else if (projectOpts?.projectName) {\n                sessionId = (await this.readProject({ projectName: projectOpts?.projectName })).id;\n            }\n            else if (projectOpts?.projectId) {\n                sessionId = projectOpts?.projectId;\n            }\n            else {\n                const project = await this.readProject({\n                    projectName: getLangSmithEnvironmentVariable(\"PROJECT\") || \"default\",\n                });\n                sessionId = project.id;\n            }\n            const tenantId = await this._getTenantId();\n            return `${this.getHostUrl()}/o/${tenantId}/projects/p/${sessionId}/r/${run.id}?poll=true`;\n        }\n        else if (runId !== undefined) {\n            const run_ = await this.readRun(runId);\n            if (!run_.app_path) {\n                throw new Error(`Run ${runId} has no app_path`);\n            }\n            const baseUrl = this.getHostUrl();\n            return `${baseUrl}${run_.app_path}`;\n        }\n        else {\n            throw new Error(\"Must provide either runId or run\");\n        }\n    }\n    async _loadChildRuns(run) {\n        const childRuns = await toArray(this.listRuns({ id: run.child_run_ids }));\n        const treemap = {};\n        const runs = {};\n        // TODO: make dotted order required when the migration finishes\n        childRuns.sort((a, b) => (a?.dotted_order ?? \"\").localeCompare(b?.dotted_order ?? \"\"));\n        for (const childRun of childRuns) {\n            if (childRun.parent_run_id === null ||\n                childRun.parent_run_id === undefined) {\n                throw new Error(`Child run ${childRun.id} has no parent`);\n            }\n            if (!(childRun.parent_run_id in treemap)) {\n                treemap[childRun.parent_run_id] = [];\n            }\n            treemap[childRun.parent_run_id].push(childRun);\n            runs[childRun.id] = childRun;\n        }\n        run.child_runs = treemap[run.id] || [];\n        for (const runId in treemap) {\n            if (runId !== run.id) {\n                runs[runId].child_runs = treemap[runId];\n            }\n        }\n        return run;\n    }\n    /**\n     * List runs from the LangSmith server.\n     * @param projectId - The ID of the project to filter by.\n     * @param projectName - The name of the project to filter by.\n     * @param parentRunId - The ID of the parent run to filter by.\n     * @param traceId - The ID of the trace to filter by.\n     * @param referenceExampleId - The ID of the reference example to filter by.\n     * @param startTime - The start time to filter by.\n     * @param isRoot - Indicates whether to only return root runs.\n     * @param runType - The run type to filter by.\n     * @param error - Indicates whether to filter by error runs.\n     * @param id - The ID of the run to filter by.\n     * @param query - The query string to filter by.\n     * @param filter - The filter string to apply to the run spans.\n     * @param traceFilter - The filter string to apply on the root run of the trace.\n     * @param limit - The maximum number of runs to retrieve.\n     * @returns {AsyncIterable<Run>} - The runs.\n     *\n     * @example\n     * // List all runs in a project\n     * const projectRuns = client.listRuns({ projectName: \"<your_project>\" });\n     *\n     * @example\n     * // List LLM and Chat runs in the last 24 hours\n     * const todaysLLMRuns = client.listRuns({\n     *   projectName: \"<your_project>\",\n     *   start_time: new Date(Date.now() - 24 * 60 * 60 * 1000),\n     *   run_type: \"llm\",\n     * });\n     *\n     * @example\n     * // List traces in a project\n     * const rootRuns = client.listRuns({\n     *   projectName: \"<your_project>\",\n     *   execution_order: 1,\n     * });\n     *\n     * @example\n     * // List runs without errors\n     * const correctRuns = client.listRuns({\n     *   projectName: \"<your_project>\",\n     *   error: false,\n     * });\n     *\n     * @example\n     * // List runs by run ID\n     * const runIds = [\n     *   \"a36092d2-4ad5-4fb4-9c0d-0dba9a2ed836\",\n     *   \"9398e6be-964f-4aa4-8ae9-ad78cd4b7074\",\n     * ];\n     * const selectedRuns = client.listRuns({ run_ids: runIds });\n     *\n     * @example\n     * // List all \"chain\" type runs that took more than 10 seconds and had `total_tokens` greater than 5000\n     * const chainRuns = client.listRuns({\n     *   projectName: \"<your_project>\",\n     *   filter: 'and(eq(run_type, \"chain\"), gt(latency, 10), gt(total_tokens, 5000))',\n     * });\n     *\n     * @example\n     * // List all runs called \"extractor\" whose root of the trace was assigned feedback \"user_score\" score of 1\n     * const goodExtractorRuns = client.listRuns({\n     *   projectName: \"<your_project>\",\n     *   filter: 'eq(name, \"extractor\")',\n     *   traceFilter: 'and(eq(feedback_key, \"user_score\"), eq(feedback_score, 1))',\n     * });\n     *\n     * @example\n     * // List all runs that started after a specific timestamp and either have \"error\" not equal to null or a \"Correctness\" feedback score equal to 0\n     * const complexRuns = client.listRuns({\n     *   projectName: \"<your_project>\",\n     *   filter: 'and(gt(start_time, \"2023-07-15T12:34:56Z\"), or(neq(error, null), and(eq(feedback_key, \"Correctness\"), eq(feedback_score, 0.0))))',\n     * });\n     *\n     * @example\n     * // List all runs where `tags` include \"experimental\" or \"beta\" and `latency` is greater than 2 seconds\n     * const taggedRuns = client.listRuns({\n     *   projectName: \"<your_project>\",\n     *   filter: 'and(or(has(tags, \"experimental\"), has(tags, \"beta\")), gt(latency, 2))',\n     * });\n     */\n    async *listRuns(props) {\n        const { projectId, projectName, parentRunId, traceId, referenceExampleId, startTime, executionOrder, isRoot, runType, error, id, query, filter, traceFilter, treeFilter, limit, select, } = props;\n        let projectIds = [];\n        if (projectId) {\n            projectIds = Array.isArray(projectId) ? projectId : [projectId];\n        }\n        if (projectName) {\n            const projectNames = Array.isArray(projectName)\n                ? projectName\n                : [projectName];\n            const projectIds_ = await Promise.all(projectNames.map((name) => this.readProject({ projectName: name }).then((project) => project.id)));\n            projectIds.push(...projectIds_);\n        }\n        const default_select = [\n            \"app_path\",\n            \"child_run_ids\",\n            \"completion_cost\",\n            \"completion_tokens\",\n            \"dotted_order\",\n            \"end_time\",\n            \"error\",\n            \"events\",\n            \"extra\",\n            \"feedback_stats\",\n            \"first_token_time\",\n            \"id\",\n            \"inputs\",\n            \"name\",\n            \"outputs\",\n            \"parent_run_id\",\n            \"parent_run_ids\",\n            \"prompt_cost\",\n            \"prompt_tokens\",\n            \"reference_example_id\",\n            \"run_type\",\n            \"session_id\",\n            \"start_time\",\n            \"status\",\n            \"tags\",\n            \"total_cost\",\n            \"total_tokens\",\n            \"trace_id\",\n        ];\n        const body = {\n            session: projectIds.length ? projectIds : null,\n            run_type: runType,\n            reference_example: referenceExampleId,\n            query,\n            filter,\n            trace_filter: traceFilter,\n            tree_filter: treeFilter,\n            execution_order: executionOrder,\n            parent_run: parentRunId,\n            start_time: startTime ? startTime.toISOString() : null,\n            error,\n            id,\n            limit,\n            trace: traceId,\n            select: select ? select : default_select,\n            is_root: isRoot,\n        };\n        let runsYielded = 0;\n        for await (const runs of this._getCursorPaginatedList(\"/runs/query\", body)) {\n            if (limit) {\n                if (runsYielded >= limit) {\n                    break;\n                }\n                if (runs.length + runsYielded > limit) {\n                    const newRuns = runs.slice(0, limit - runsYielded);\n                    yield* newRuns;\n                    break;\n                }\n                runsYielded += runs.length;\n                yield* runs;\n            }\n            else {\n                yield* runs;\n            }\n        }\n    }\n    async getRunStats({ id, trace, parentRun, runType, projectNames, projectIds, referenceExampleIds, startTime, endTime, error, query, filter, traceFilter, treeFilter, isRoot, dataSourceType, }) {\n        let projectIds_ = projectIds || [];\n        if (projectNames) {\n            projectIds_ = [\n                ...(projectIds || []),\n                ...(await Promise.all(projectNames.map((name) => this.readProject({ projectName: name }).then((project) => project.id)))),\n            ];\n        }\n        const payload = {\n            id,\n            trace,\n            parent_run: parentRun,\n            run_type: runType,\n            session: projectIds_,\n            reference_example: referenceExampleIds,\n            start_time: startTime,\n            end_time: endTime,\n            error,\n            query,\n            filter,\n            trace_filter: traceFilter,\n            tree_filter: treeFilter,\n            is_root: isRoot,\n            data_source_type: dataSourceType,\n        };\n        // Remove undefined values from the payload\n        const filteredPayload = Object.fromEntries(Object.entries(payload).filter(([_, value]) => value !== undefined));\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/runs/stats`, {\n            method: \"POST\",\n            headers: this.headers,\n            body: JSON.stringify(filteredPayload),\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        const result = await response.json();\n        return result;\n    }\n    async shareRun(runId, { shareId } = {}) {\n        const data = {\n            run_id: runId,\n            share_token: shareId || uuid.v4(),\n        };\n        assertUuid(runId);\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/runs/${runId}/share`, {\n            method: \"PUT\",\n            headers: this.headers,\n            body: JSON.stringify(data),\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        const result = await response.json();\n        if (result === null || !(\"share_token\" in result)) {\n            throw new Error(\"Invalid response from server\");\n        }\n        return `${this.getHostUrl()}/public/${result[\"share_token\"]}/r`;\n    }\n    async unshareRun(runId) {\n        assertUuid(runId);\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/runs/${runId}/share`, {\n            method: \"DELETE\",\n            headers: this.headers,\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, \"unshare run\", true);\n    }\n    async readRunSharedLink(runId) {\n        assertUuid(runId);\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/runs/${runId}/share`, {\n            method: \"GET\",\n            headers: this.headers,\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        const result = await response.json();\n        if (result === null || !(\"share_token\" in result)) {\n            return undefined;\n        }\n        return `${this.getHostUrl()}/public/${result[\"share_token\"]}/r`;\n    }\n    async listSharedRuns(shareToken, { runIds, } = {}) {\n        const queryParams = new URLSearchParams({\n            share_token: shareToken,\n        });\n        if (runIds !== undefined) {\n            for (const runId of runIds) {\n                queryParams.append(\"id\", runId);\n            }\n        }\n        assertUuid(shareToken);\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/public/${shareToken}/runs${queryParams}`, {\n            method: \"GET\",\n            headers: this.headers,\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        const runs = await response.json();\n        return runs;\n    }\n    async readDatasetSharedSchema(datasetId, datasetName) {\n        if (!datasetId && !datasetName) {\n            throw new Error(\"Either datasetId or datasetName must be given\");\n        }\n        if (!datasetId) {\n            const dataset = await this.readDataset({ datasetName });\n            datasetId = dataset.id;\n        }\n        assertUuid(datasetId);\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/datasets/${datasetId}/share`, {\n            method: \"GET\",\n            headers: this.headers,\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        const shareSchema = await response.json();\n        shareSchema.url = `${this.getHostUrl()}/public/${shareSchema.share_token}/d`;\n        return shareSchema;\n    }\n    async shareDataset(datasetId, datasetName) {\n        if (!datasetId && !datasetName) {\n            throw new Error(\"Either datasetId or datasetName must be given\");\n        }\n        if (!datasetId) {\n            const dataset = await this.readDataset({ datasetName });\n            datasetId = dataset.id;\n        }\n        const data = {\n            dataset_id: datasetId,\n        };\n        assertUuid(datasetId);\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/datasets/${datasetId}/share`, {\n            method: \"PUT\",\n            headers: this.headers,\n            body: JSON.stringify(data),\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        const shareSchema = await response.json();\n        shareSchema.url = `${this.getHostUrl()}/public/${shareSchema.share_token}/d`;\n        return shareSchema;\n    }\n    async unshareDataset(datasetId) {\n        assertUuid(datasetId);\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/datasets/${datasetId}/share`, {\n            method: \"DELETE\",\n            headers: this.headers,\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, \"unshare dataset\", true);\n    }\n    async readSharedDataset(shareToken) {\n        assertUuid(shareToken);\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/public/${shareToken}/datasets`, {\n            method: \"GET\",\n            headers: this.headers,\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        const dataset = await response.json();\n        return dataset;\n    }\n    /**\n     * Get shared examples.\n     *\n     * @param {string} shareToken The share token to get examples for. A share token is the UUID (or LangSmith URL, including UUID) generated when explicitly marking an example as public.\n     * @param {Object} [options] Additional options for listing the examples.\n     * @param {string[] | undefined} [options.exampleIds] A list of example IDs to filter by.\n     * @returns {Promise<Example[]>} The shared examples.\n     */\n    async listSharedExamples(shareToken, options) {\n        const params = {};\n        if (options?.exampleIds) {\n            params.id = options.exampleIds;\n        }\n        const urlParams = new URLSearchParams();\n        Object.entries(params).forEach(([key, value]) => {\n            if (Array.isArray(value)) {\n                value.forEach((v) => urlParams.append(key, v));\n            }\n            else {\n                urlParams.append(key, value);\n            }\n        });\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/public/${shareToken}/examples?${urlParams.toString()}`, {\n            method: \"GET\",\n            headers: this.headers,\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        const result = await response.json();\n        if (!response.ok) {\n            if (\"detail\" in result) {\n                throw new Error(`Failed to list shared examples.\\nStatus: ${response.status}\\nMessage: ${result.detail.join(\"\\n\")}`);\n            }\n            throw new Error(`Failed to list shared examples: ${response.status} ${response.statusText}`);\n        }\n        return result.map((example) => ({\n            ...example,\n            _hostUrl: this.getHostUrl(),\n        }));\n    }\n    async createProject({ projectName, description = null, metadata = null, upsert = false, projectExtra = null, referenceDatasetId = null, }) {\n        const upsert_ = upsert ? `?upsert=true` : \"\";\n        const endpoint = `${this.apiUrl}/sessions${upsert_}`;\n        const extra = projectExtra || {};\n        if (metadata) {\n            extra[\"metadata\"] = metadata;\n        }\n        const body = {\n            name: projectName,\n            extra,\n            description,\n        };\n        if (referenceDatasetId !== null) {\n            body[\"reference_dataset_id\"] = referenceDatasetId;\n        }\n        const response = await this.caller.call(_getFetchImplementation(), endpoint, {\n            method: \"POST\",\n            headers: { ...this.headers, \"Content-Type\": \"application/json\" },\n            body: JSON.stringify(body),\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, \"create project\");\n        const result = await response.json();\n        return result;\n    }\n    async updateProject(projectId, { name = null, description = null, metadata = null, projectExtra = null, endTime = null, }) {\n        const endpoint = `${this.apiUrl}/sessions/${projectId}`;\n        let extra = projectExtra;\n        if (metadata) {\n            extra = { ...(extra || {}), metadata };\n        }\n        const body = {\n            name,\n            extra,\n            description,\n            end_time: endTime ? new Date(endTime).toISOString() : null,\n        };\n        const response = await this.caller.call(_getFetchImplementation(), endpoint, {\n            method: \"PATCH\",\n            headers: { ...this.headers, \"Content-Type\": \"application/json\" },\n            body: JSON.stringify(body),\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, \"update project\");\n        const result = await response.json();\n        return result;\n    }\n    async hasProject({ projectId, projectName, }) {\n        // TODO: Add a head request\n        let path = \"/sessions\";\n        const params = new URLSearchParams();\n        if (projectId !== undefined && projectName !== undefined) {\n            throw new Error(\"Must provide either projectName or projectId, not both\");\n        }\n        else if (projectId !== undefined) {\n            assertUuid(projectId);\n            path += `/${projectId}`;\n        }\n        else if (projectName !== undefined) {\n            params.append(\"name\", projectName);\n        }\n        else {\n            throw new Error(\"Must provide projectName or projectId\");\n        }\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}${path}?${params}`, {\n            method: \"GET\",\n            headers: this.headers,\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        // consume the response body to release the connection\n        // https://undici.nodejs.org/#/?id=garbage-collection\n        try {\n            const result = await response.json();\n            if (!response.ok) {\n                return false;\n            }\n            // If it's OK and we're querying by name, need to check the list is not empty\n            if (Array.isArray(result)) {\n                return result.length > 0;\n            }\n            // projectId querying\n            return true;\n        }\n        catch (e) {\n            return false;\n        }\n    }\n    async readProject({ projectId, projectName, includeStats, }) {\n        let path = \"/sessions\";\n        const params = new URLSearchParams();\n        if (projectId !== undefined && projectName !== undefined) {\n            throw new Error(\"Must provide either projectName or projectId, not both\");\n        }\n        else if (projectId !== undefined) {\n            assertUuid(projectId);\n            path += `/${projectId}`;\n        }\n        else if (projectName !== undefined) {\n            params.append(\"name\", projectName);\n        }\n        else {\n            throw new Error(\"Must provide projectName or projectId\");\n        }\n        if (includeStats !== undefined) {\n            params.append(\"include_stats\", includeStats.toString());\n        }\n        const response = await this._get(path, params);\n        let result;\n        if (Array.isArray(response)) {\n            if (response.length === 0) {\n                throw new Error(`Project[id=${projectId}, name=${projectName}] not found`);\n            }\n            result = response[0];\n        }\n        else {\n            result = response;\n        }\n        return result;\n    }\n    async getProjectUrl({ projectId, projectName, }) {\n        if (projectId === undefined && projectName === undefined) {\n            throw new Error(\"Must provide either projectName or projectId\");\n        }\n        const project = await this.readProject({ projectId, projectName });\n        const tenantId = await this._getTenantId();\n        return `${this.getHostUrl()}/o/${tenantId}/projects/p/${project.id}`;\n    }\n    async getDatasetUrl({ datasetId, datasetName, }) {\n        if (datasetId === undefined && datasetName === undefined) {\n            throw new Error(\"Must provide either datasetName or datasetId\");\n        }\n        const dataset = await this.readDataset({ datasetId, datasetName });\n        const tenantId = await this._getTenantId();\n        return `${this.getHostUrl()}/o/${tenantId}/datasets/${dataset.id}`;\n    }\n    async _getTenantId() {\n        if (this._tenantId !== null) {\n            return this._tenantId;\n        }\n        const queryParams = new URLSearchParams({ limit: \"1\" });\n        for await (const projects of this._getPaginated(\"/sessions\", queryParams)) {\n            this._tenantId = projects[0].tenant_id;\n            return projects[0].tenant_id;\n        }\n        throw new Error(\"No projects found to resolve tenant.\");\n    }\n    async *listProjects({ projectIds, name, nameContains, referenceDatasetId, referenceDatasetName, referenceFree, metadata, } = {}) {\n        const params = new URLSearchParams();\n        if (projectIds !== undefined) {\n            for (const projectId of projectIds) {\n                params.append(\"id\", projectId);\n            }\n        }\n        if (name !== undefined) {\n            params.append(\"name\", name);\n        }\n        if (nameContains !== undefined) {\n            params.append(\"name_contains\", nameContains);\n        }\n        if (referenceDatasetId !== undefined) {\n            params.append(\"reference_dataset\", referenceDatasetId);\n        }\n        else if (referenceDatasetName !== undefined) {\n            const dataset = await this.readDataset({\n                datasetName: referenceDatasetName,\n            });\n            params.append(\"reference_dataset\", dataset.id);\n        }\n        if (referenceFree !== undefined) {\n            params.append(\"reference_free\", referenceFree.toString());\n        }\n        if (metadata !== undefined) {\n            params.append(\"metadata\", JSON.stringify(metadata));\n        }\n        for await (const projects of this._getPaginated(\"/sessions\", params)) {\n            yield* projects;\n        }\n    }\n    async deleteProject({ projectId, projectName, }) {\n        let projectId_;\n        if (projectId === undefined && projectName === undefined) {\n            throw new Error(\"Must provide projectName or projectId\");\n        }\n        else if (projectId !== undefined && projectName !== undefined) {\n            throw new Error(\"Must provide either projectName or projectId, not both\");\n        }\n        else if (projectId === undefined) {\n            projectId_ = (await this.readProject({ projectName })).id;\n        }\n        else {\n            projectId_ = projectId;\n        }\n        assertUuid(projectId_);\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/sessions/${projectId_}`, {\n            method: \"DELETE\",\n            headers: this.headers,\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, `delete session ${projectId_} (${projectName})`, true);\n    }\n    async uploadCsv({ csvFile, fileName, inputKeys, outputKeys, description, dataType, name, }) {\n        const url = `${this.apiUrl}/datasets/upload`;\n        const formData = new FormData();\n        formData.append(\"file\", csvFile, fileName);\n        inputKeys.forEach((key) => {\n            formData.append(\"input_keys\", key);\n        });\n        outputKeys.forEach((key) => {\n            formData.append(\"output_keys\", key);\n        });\n        if (description) {\n            formData.append(\"description\", description);\n        }\n        if (dataType) {\n            formData.append(\"data_type\", dataType);\n        }\n        if (name) {\n            formData.append(\"name\", name);\n        }\n        const response = await this.caller.call(_getFetchImplementation(), url, {\n            method: \"POST\",\n            headers: this.headers,\n            body: formData,\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, \"upload CSV\");\n        const result = await response.json();\n        return result;\n    }\n    async createDataset(name, { description, dataType, inputsSchema, outputsSchema, metadata, } = {}) {\n        const body = {\n            name,\n            description,\n            extra: metadata ? { metadata } : undefined,\n        };\n        if (dataType) {\n            body.data_type = dataType;\n        }\n        if (inputsSchema) {\n            body.inputs_schema_definition = inputsSchema;\n        }\n        if (outputsSchema) {\n            body.outputs_schema_definition = outputsSchema;\n        }\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/datasets`, {\n            method: \"POST\",\n            headers: { ...this.headers, \"Content-Type\": \"application/json\" },\n            body: JSON.stringify(body),\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, \"create dataset\");\n        const result = await response.json();\n        return result;\n    }\n    async readDataset({ datasetId, datasetName, }) {\n        let path = \"/datasets\";\n        // limit to 1 result\n        const params = new URLSearchParams({ limit: \"1\" });\n        if (datasetId !== undefined && datasetName !== undefined) {\n            throw new Error(\"Must provide either datasetName or datasetId, not both\");\n        }\n        else if (datasetId !== undefined) {\n            assertUuid(datasetId);\n            path += `/${datasetId}`;\n        }\n        else if (datasetName !== undefined) {\n            params.append(\"name\", datasetName);\n        }\n        else {\n            throw new Error(\"Must provide datasetName or datasetId\");\n        }\n        const response = await this._get(path, params);\n        let result;\n        if (Array.isArray(response)) {\n            if (response.length === 0) {\n                throw new Error(`Dataset[id=${datasetId}, name=${datasetName}] not found`);\n            }\n            result = response[0];\n        }\n        else {\n            result = response;\n        }\n        return result;\n    }\n    async hasDataset({ datasetId, datasetName, }) {\n        try {\n            await this.readDataset({ datasetId, datasetName });\n            return true;\n        }\n        catch (e) {\n            if (\n            // eslint-disable-next-line no-instanceof/no-instanceof\n            e instanceof Error &&\n                e.message.toLocaleLowerCase().includes(\"not found\")) {\n                return false;\n            }\n            throw e;\n        }\n    }\n    async diffDatasetVersions({ datasetId, datasetName, fromVersion, toVersion, }) {\n        let datasetId_ = datasetId;\n        if (datasetId_ === undefined && datasetName === undefined) {\n            throw new Error(\"Must provide either datasetName or datasetId\");\n        }\n        else if (datasetId_ !== undefined && datasetName !== undefined) {\n            throw new Error(\"Must provide either datasetName or datasetId, not both\");\n        }\n        else if (datasetId_ === undefined) {\n            const dataset = await this.readDataset({ datasetName });\n            datasetId_ = dataset.id;\n        }\n        const urlParams = new URLSearchParams({\n            from_version: typeof fromVersion === \"string\"\n                ? fromVersion\n                : fromVersion.toISOString(),\n            to_version: typeof toVersion === \"string\" ? toVersion : toVersion.toISOString(),\n        });\n        const response = await this._get(`/datasets/${datasetId_}/versions/diff`, urlParams);\n        return response;\n    }\n    async readDatasetOpenaiFinetuning({ datasetId, datasetName, }) {\n        const path = \"/datasets\";\n        if (datasetId !== undefined) {\n            // do nothing\n        }\n        else if (datasetName !== undefined) {\n            datasetId = (await this.readDataset({ datasetName })).id;\n        }\n        else {\n            throw new Error(\"Must provide datasetName or datasetId\");\n        }\n        const response = await this._getResponse(`${path}/${datasetId}/openai_ft`);\n        const datasetText = await response.text();\n        const dataset = datasetText\n            .trim()\n            .split(\"\\n\")\n            .map((line) => JSON.parse(line));\n        return dataset;\n    }\n    async *listDatasets({ limit = 100, offset = 0, datasetIds, datasetName, datasetNameContains, metadata, } = {}) {\n        const path = \"/datasets\";\n        const params = new URLSearchParams({\n            limit: limit.toString(),\n            offset: offset.toString(),\n        });\n        if (datasetIds !== undefined) {\n            for (const id_ of datasetIds) {\n                params.append(\"id\", id_);\n            }\n        }\n        if (datasetName !== undefined) {\n            params.append(\"name\", datasetName);\n        }\n        if (datasetNameContains !== undefined) {\n            params.append(\"name_contains\", datasetNameContains);\n        }\n        if (metadata !== undefined) {\n            params.append(\"metadata\", JSON.stringify(metadata));\n        }\n        for await (const datasets of this._getPaginated(path, params)) {\n            yield* datasets;\n        }\n    }\n    /**\n     * Update a dataset\n     * @param props The dataset details to update\n     * @returns The updated dataset\n     */\n    async updateDataset(props) {\n        const { datasetId, datasetName, ...update } = props;\n        if (!datasetId && !datasetName) {\n            throw new Error(\"Must provide either datasetName or datasetId\");\n        }\n        const _datasetId = datasetId ?? (await this.readDataset({ datasetName })).id;\n        assertUuid(_datasetId);\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/datasets/${_datasetId}`, {\n            method: \"PATCH\",\n            headers: { ...this.headers, \"Content-Type\": \"application/json\" },\n            body: JSON.stringify(update),\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, \"update dataset\");\n        return (await response.json());\n    }\n    async deleteDataset({ datasetId, datasetName, }) {\n        let path = \"/datasets\";\n        let datasetId_ = datasetId;\n        if (datasetId !== undefined && datasetName !== undefined) {\n            throw new Error(\"Must provide either datasetName or datasetId, not both\");\n        }\n        else if (datasetName !== undefined) {\n            const dataset = await this.readDataset({ datasetName });\n            datasetId_ = dataset.id;\n        }\n        if (datasetId_ !== undefined) {\n            assertUuid(datasetId_);\n            path += `/${datasetId_}`;\n        }\n        else {\n            throw new Error(\"Must provide datasetName or datasetId\");\n        }\n        const response = await this.caller.call(_getFetchImplementation(), this.apiUrl + path, {\n            method: \"DELETE\",\n            headers: this.headers,\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, `delete ${path}`);\n        await response.json();\n    }\n    async indexDataset({ datasetId, datasetName, tag, }) {\n        let datasetId_ = datasetId;\n        if (!datasetId_ && !datasetName) {\n            throw new Error(\"Must provide either datasetName or datasetId\");\n        }\n        else if (datasetId_ && datasetName) {\n            throw new Error(\"Must provide either datasetName or datasetId, not both\");\n        }\n        else if (!datasetId_) {\n            const dataset = await this.readDataset({ datasetName });\n            datasetId_ = dataset.id;\n        }\n        assertUuid(datasetId_);\n        const data = {\n            tag: tag,\n        };\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/datasets/${datasetId_}/index`, {\n            method: \"POST\",\n            headers: { ...this.headers, \"Content-Type\": \"application/json\" },\n            body: JSON.stringify(data),\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, \"index dataset\");\n        await response.json();\n    }\n    /**\n     * Lets you run a similarity search query on a dataset.\n     *\n     * Requires the dataset to be indexed. Please see the `indexDataset` method to set up indexing.\n     *\n     * @param inputs      The input on which to run the similarity search. Must have the\n     *                    same schema as the dataset.\n     *\n     * @param datasetId   The dataset to search for similar examples.\n     *\n     * @param limit       The maximum number of examples to return. Will return the top `limit` most\n     *                    similar examples in order of most similar to least similar. If no similar\n     *                    examples are found, random examples will be returned.\n     *\n     * @param filter      A filter string to apply to the search. Only examples will be returned that\n     *                    match the filter string. Some examples of filters\n     *\n     *                    - eq(metadata.mykey, \"value\")\n     *                    - and(neq(metadata.my.nested.key, \"value\"), neq(metadata.mykey, \"value\"))\n     *                    - or(eq(metadata.mykey, \"value\"), eq(metadata.mykey, \"othervalue\"))\n     *\n     * @returns           A list of similar examples.\n     *\n     *\n     * @example\n     * dataset_id = \"123e4567-e89b-12d3-a456-426614174000\"\n     * inputs = {\"text\": \"How many people live in Berlin?\"}\n     * limit = 5\n     * examples = await client.similarExamples(inputs, dataset_id, limit)\n     */\n    async similarExamples(inputs, datasetId, limit, { filter, } = {}) {\n        const data = {\n            limit: limit,\n            inputs: inputs,\n        };\n        if (filter !== undefined) {\n            data[\"filter\"] = filter;\n        }\n        assertUuid(datasetId);\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/datasets/${datasetId}/search`, {\n            method: \"POST\",\n            headers: { ...this.headers, \"Content-Type\": \"application/json\" },\n            body: JSON.stringify(data),\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, \"fetch similar examples\");\n        const result = await response.json();\n        return result[\"examples\"];\n    }\n    async createExample(inputs, outputs, { datasetId, datasetName, createdAt, exampleId, metadata, split, sourceRunId, }) {\n        let datasetId_ = datasetId;\n        if (datasetId_ === undefined && datasetName === undefined) {\n            throw new Error(\"Must provide either datasetName or datasetId\");\n        }\n        else if (datasetId_ !== undefined && datasetName !== undefined) {\n            throw new Error(\"Must provide either datasetName or datasetId, not both\");\n        }\n        else if (datasetId_ === undefined) {\n            const dataset = await this.readDataset({ datasetName });\n            datasetId_ = dataset.id;\n        }\n        const createdAt_ = createdAt || new Date();\n        const data = {\n            dataset_id: datasetId_,\n            inputs,\n            outputs,\n            created_at: createdAt_?.toISOString(),\n            id: exampleId,\n            metadata,\n            split,\n            source_run_id: sourceRunId,\n        };\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/examples`, {\n            method: \"POST\",\n            headers: { ...this.headers, \"Content-Type\": \"application/json\" },\n            body: JSON.stringify(data),\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, \"create example\");\n        const result = await response.json();\n        return result;\n    }\n    async createExamples(props) {\n        const { inputs, outputs, metadata, sourceRunIds, exampleIds, datasetId, datasetName, } = props;\n        let datasetId_ = datasetId;\n        if (datasetId_ === undefined && datasetName === undefined) {\n            throw new Error(\"Must provide either datasetName or datasetId\");\n        }\n        else if (datasetId_ !== undefined && datasetName !== undefined) {\n            throw new Error(\"Must provide either datasetName or datasetId, not both\");\n        }\n        else if (datasetId_ === undefined) {\n            const dataset = await this.readDataset({ datasetName });\n            datasetId_ = dataset.id;\n        }\n        const formattedExamples = inputs.map((input, idx) => {\n            return {\n                dataset_id: datasetId_,\n                inputs: input,\n                outputs: outputs ? outputs[idx] : undefined,\n                metadata: metadata ? metadata[idx] : undefined,\n                split: props.splits ? props.splits[idx] : undefined,\n                id: exampleIds ? exampleIds[idx] : undefined,\n                source_run_id: sourceRunIds ? sourceRunIds[idx] : undefined,\n            };\n        });\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/examples/bulk`, {\n            method: \"POST\",\n            headers: { ...this.headers, \"Content-Type\": \"application/json\" },\n            body: JSON.stringify(formattedExamples),\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, \"create examples\");\n        const result = await response.json();\n        return result;\n    }\n    async createLLMExample(input, generation, options) {\n        return this.createExample({ input }, { output: generation }, options);\n    }\n    async createChatExample(input, generations, options) {\n        const finalInput = input.map((message) => {\n            if (isLangChainMessage(message)) {\n                return convertLangChainMessageToExample(message);\n            }\n            return message;\n        });\n        const finalOutput = isLangChainMessage(generations)\n            ? convertLangChainMessageToExample(generations)\n            : generations;\n        return this.createExample({ input: finalInput }, { output: finalOutput }, options);\n    }\n    async readExample(exampleId) {\n        assertUuid(exampleId);\n        const path = `/examples/${exampleId}`;\n        return await this._get(path);\n    }\n    async *listExamples({ datasetId, datasetName, exampleIds, asOf, splits, inlineS3Urls, metadata, limit, offset, filter, } = {}) {\n        let datasetId_;\n        if (datasetId !== undefined && datasetName !== undefined) {\n            throw new Error(\"Must provide either datasetName or datasetId, not both\");\n        }\n        else if (datasetId !== undefined) {\n            datasetId_ = datasetId;\n        }\n        else if (datasetName !== undefined) {\n            const dataset = await this.readDataset({ datasetName });\n            datasetId_ = dataset.id;\n        }\n        else {\n            throw new Error(\"Must provide a datasetName or datasetId\");\n        }\n        const params = new URLSearchParams({ dataset: datasetId_ });\n        const dataset_version = asOf\n            ? typeof asOf === \"string\"\n                ? asOf\n                : asOf?.toISOString()\n            : undefined;\n        if (dataset_version) {\n            params.append(\"as_of\", dataset_version);\n        }\n        const inlineS3Urls_ = inlineS3Urls ?? true;\n        params.append(\"inline_s3_urls\", inlineS3Urls_.toString());\n        if (exampleIds !== undefined) {\n            for (const id_ of exampleIds) {\n                params.append(\"id\", id_);\n            }\n        }\n        if (splits !== undefined) {\n            for (const split of splits) {\n                params.append(\"splits\", split);\n            }\n        }\n        if (metadata !== undefined) {\n            const serializedMetadata = JSON.stringify(metadata);\n            params.append(\"metadata\", serializedMetadata);\n        }\n        if (limit !== undefined) {\n            params.append(\"limit\", limit.toString());\n        }\n        if (offset !== undefined) {\n            params.append(\"offset\", offset.toString());\n        }\n        if (filter !== undefined) {\n            params.append(\"filter\", filter);\n        }\n        let i = 0;\n        for await (const examples of this._getPaginated(\"/examples\", params)) {\n            for (const example of examples) {\n                yield example;\n                i++;\n            }\n            if (limit !== undefined && i >= limit) {\n                break;\n            }\n        }\n    }\n    async deleteExample(exampleId) {\n        assertUuid(exampleId);\n        const path = `/examples/${exampleId}`;\n        const response = await this.caller.call(_getFetchImplementation(), this.apiUrl + path, {\n            method: \"DELETE\",\n            headers: this.headers,\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, `delete ${path}`);\n        await response.json();\n    }\n    async updateExample(exampleId, update) {\n        assertUuid(exampleId);\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/examples/${exampleId}`, {\n            method: \"PATCH\",\n            headers: { ...this.headers, \"Content-Type\": \"application/json\" },\n            body: JSON.stringify(update),\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, \"update example\");\n        const result = await response.json();\n        return result;\n    }\n    async updateExamples(update) {\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/examples/bulk`, {\n            method: \"PATCH\",\n            headers: { ...this.headers, \"Content-Type\": \"application/json\" },\n            body: JSON.stringify(update),\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, \"update examples\");\n        const result = await response.json();\n        return result;\n    }\n    async listDatasetSplits({ datasetId, datasetName, asOf, }) {\n        let datasetId_;\n        if (datasetId === undefined && datasetName === undefined) {\n            throw new Error(\"Must provide dataset name or ID\");\n        }\n        else if (datasetId !== undefined && datasetName !== undefined) {\n            throw new Error(\"Must provide either datasetName or datasetId, not both\");\n        }\n        else if (datasetId === undefined) {\n            const dataset = await this.readDataset({ datasetName });\n            datasetId_ = dataset.id;\n        }\n        else {\n            datasetId_ = datasetId;\n        }\n        assertUuid(datasetId_);\n        const params = new URLSearchParams();\n        const dataset_version = asOf\n            ? typeof asOf === \"string\"\n                ? asOf\n                : asOf?.toISOString()\n            : undefined;\n        if (dataset_version) {\n            params.append(\"as_of\", dataset_version);\n        }\n        const response = await this._get(`/datasets/${datasetId_}/splits`, params);\n        return response;\n    }\n    async updateDatasetSplits({ datasetId, datasetName, splitName, exampleIds, remove = false, }) {\n        let datasetId_;\n        if (datasetId === undefined && datasetName === undefined) {\n            throw new Error(\"Must provide dataset name or ID\");\n        }\n        else if (datasetId !== undefined && datasetName !== undefined) {\n            throw new Error(\"Must provide either datasetName or datasetId, not both\");\n        }\n        else if (datasetId === undefined) {\n            const dataset = await this.readDataset({ datasetName });\n            datasetId_ = dataset.id;\n        }\n        else {\n            datasetId_ = datasetId;\n        }\n        assertUuid(datasetId_);\n        const data = {\n            split_name: splitName,\n            examples: exampleIds.map((id) => {\n                assertUuid(id);\n                return id;\n            }),\n            remove,\n        };\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/datasets/${datasetId_}/splits`, {\n            method: \"PUT\",\n            headers: { ...this.headers, \"Content-Type\": \"application/json\" },\n            body: JSON.stringify(data),\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, \"update dataset splits\", true);\n    }\n    /**\n     * @deprecated This method is deprecated and will be removed in future LangSmith versions, use `evaluate` from `langsmith/evaluation` instead.\n     */\n    async evaluateRun(run, evaluator, { sourceInfo, loadChildRuns, referenceExample, } = { loadChildRuns: false }) {\n        warnOnce(\"This method is deprecated and will be removed in future LangSmith versions, use `evaluate` from `langsmith/evaluation` instead.\");\n        let run_;\n        if (typeof run === \"string\") {\n            run_ = await this.readRun(run, { loadChildRuns });\n        }\n        else if (typeof run === \"object\" && \"id\" in run) {\n            run_ = run;\n        }\n        else {\n            throw new Error(`Invalid run type: ${typeof run}`);\n        }\n        if (run_.reference_example_id !== null &&\n            run_.reference_example_id !== undefined) {\n            referenceExample = await this.readExample(run_.reference_example_id);\n        }\n        const feedbackResult = await evaluator.evaluateRun(run_, referenceExample);\n        const [_, feedbacks] = await this._logEvaluationFeedback(feedbackResult, run_, sourceInfo);\n        return feedbacks[0];\n    }\n    async createFeedback(runId, key, { score, value, correction, comment, sourceInfo, feedbackSourceType = \"api\", sourceRunId, feedbackId, feedbackConfig, projectId, comparativeExperimentId, }) {\n        if (!runId && !projectId) {\n            throw new Error(\"One of runId or projectId must be provided\");\n        }\n        if (runId && projectId) {\n            throw new Error(\"Only one of runId or projectId can be provided\");\n        }\n        const feedback_source = {\n            type: feedbackSourceType ?? \"api\",\n            metadata: sourceInfo ?? {},\n        };\n        if (sourceRunId !== undefined &&\n            feedback_source?.metadata !== undefined &&\n            !feedback_source.metadata[\"__run\"]) {\n            feedback_source.metadata[\"__run\"] = { run_id: sourceRunId };\n        }\n        if (feedback_source?.metadata !== undefined &&\n            feedback_source.metadata[\"__run\"]?.run_id !== undefined) {\n            assertUuid(feedback_source.metadata[\"__run\"].run_id);\n        }\n        const feedback = {\n            id: feedbackId ?? uuid.v4(),\n            run_id: runId,\n            key,\n            score,\n            value,\n            correction,\n            comment,\n            feedback_source: feedback_source,\n            comparative_experiment_id: comparativeExperimentId,\n            feedbackConfig,\n            session_id: projectId,\n        };\n        const url = `${this.apiUrl}/feedback`;\n        const response = await this.caller.call(_getFetchImplementation(), url, {\n            method: \"POST\",\n            headers: { ...this.headers, \"Content-Type\": \"application/json\" },\n            body: JSON.stringify(feedback),\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, \"create feedback\", true);\n        return feedback;\n    }\n    async updateFeedback(feedbackId, { score, value, correction, comment, }) {\n        const feedbackUpdate = {};\n        if (score !== undefined && score !== null) {\n            feedbackUpdate[\"score\"] = score;\n        }\n        if (value !== undefined && value !== null) {\n            feedbackUpdate[\"value\"] = value;\n        }\n        if (correction !== undefined && correction !== null) {\n            feedbackUpdate[\"correction\"] = correction;\n        }\n        if (comment !== undefined && comment !== null) {\n            feedbackUpdate[\"comment\"] = comment;\n        }\n        assertUuid(feedbackId);\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/feedback/${feedbackId}`, {\n            method: \"PATCH\",\n            headers: { ...this.headers, \"Content-Type\": \"application/json\" },\n            body: JSON.stringify(feedbackUpdate),\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, \"update feedback\", true);\n    }\n    async readFeedback(feedbackId) {\n        assertUuid(feedbackId);\n        const path = `/feedback/${feedbackId}`;\n        const response = await this._get(path);\n        return response;\n    }\n    async deleteFeedback(feedbackId) {\n        assertUuid(feedbackId);\n        const path = `/feedback/${feedbackId}`;\n        const response = await this.caller.call(_getFetchImplementation(), this.apiUrl + path, {\n            method: \"DELETE\",\n            headers: this.headers,\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, `delete ${path}`);\n        await response.json();\n    }\n    async *listFeedback({ runIds, feedbackKeys, feedbackSourceTypes, } = {}) {\n        const queryParams = new URLSearchParams();\n        if (runIds) {\n            queryParams.append(\"run\", runIds.join(\",\"));\n        }\n        if (feedbackKeys) {\n            for (const key of feedbackKeys) {\n                queryParams.append(\"key\", key);\n            }\n        }\n        if (feedbackSourceTypes) {\n            for (const type of feedbackSourceTypes) {\n                queryParams.append(\"source\", type);\n            }\n        }\n        for await (const feedbacks of this._getPaginated(\"/feedback\", queryParams)) {\n            yield* feedbacks;\n        }\n    }\n    /**\n     * Creates a presigned feedback token and URL.\n     *\n     * The token can be used to authorize feedback metrics without\n     * needing an API key. This is useful for giving browser-based\n     * applications the ability to submit feedback without needing\n     * to expose an API key.\n     *\n     * @param runId - The ID of the run.\n     * @param feedbackKey - The feedback key.\n     * @param options - Additional options for the token.\n     * @param options.expiration - The expiration time for the token.\n     *\n     * @returns A promise that resolves to a FeedbackIngestToken.\n     */\n    async createPresignedFeedbackToken(runId, feedbackKey, { expiration, feedbackConfig, } = {}) {\n        const body = {\n            run_id: runId,\n            feedback_key: feedbackKey,\n            feedback_config: feedbackConfig,\n        };\n        if (expiration) {\n            if (typeof expiration === \"string\") {\n                body[\"expires_at\"] = expiration;\n            }\n            else if (expiration?.hours || expiration?.minutes || expiration?.days) {\n                body[\"expires_in\"] = expiration;\n            }\n        }\n        else {\n            body[\"expires_in\"] = {\n                hours: 3,\n            };\n        }\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/feedback/tokens`, {\n            method: \"POST\",\n            headers: { ...this.headers, \"Content-Type\": \"application/json\" },\n            body: JSON.stringify(body),\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        const result = await response.json();\n        return result;\n    }\n    async createComparativeExperiment({ name, experimentIds, referenceDatasetId, createdAt, description, metadata, id, }) {\n        if (experimentIds.length === 0) {\n            throw new Error(\"At least one experiment is required\");\n        }\n        if (!referenceDatasetId) {\n            referenceDatasetId = (await this.readProject({\n                projectId: experimentIds[0],\n            })).reference_dataset_id;\n        }\n        if (!referenceDatasetId == null) {\n            throw new Error(\"A reference dataset is required\");\n        }\n        const body = {\n            id,\n            name,\n            experiment_ids: experimentIds,\n            reference_dataset_id: referenceDatasetId,\n            description,\n            created_at: (createdAt ?? new Date())?.toISOString(),\n            extra: {},\n        };\n        if (metadata)\n            body.extra[\"metadata\"] = metadata;\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/datasets/comparative`, {\n            method: \"POST\",\n            headers: { ...this.headers, \"Content-Type\": \"application/json\" },\n            body: JSON.stringify(body),\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        return await response.json();\n    }\n    /**\n     * Retrieves a list of presigned feedback tokens for a given run ID.\n     * @param runId The ID of the run.\n     * @returns An async iterable of FeedbackIngestToken objects.\n     */\n    async *listPresignedFeedbackTokens(runId) {\n        assertUuid(runId);\n        const params = new URLSearchParams({ run_id: runId });\n        for await (const tokens of this._getPaginated(\"/feedback/tokens\", params)) {\n            yield* tokens;\n        }\n    }\n    _selectEvalResults(results) {\n        let results_;\n        if (\"results\" in results) {\n            results_ = results.results;\n        }\n        else {\n            results_ = [results];\n        }\n        return results_;\n    }\n    async _logEvaluationFeedback(evaluatorResponse, run, sourceInfo) {\n        const evalResults = this._selectEvalResults(evaluatorResponse);\n        const feedbacks = [];\n        for (const res of evalResults) {\n            let sourceInfo_ = sourceInfo || {};\n            if (res.evaluatorInfo) {\n                sourceInfo_ = { ...res.evaluatorInfo, ...sourceInfo_ };\n            }\n            let runId_ = null;\n            if (res.targetRunId) {\n                runId_ = res.targetRunId;\n            }\n            else if (run) {\n                runId_ = run.id;\n            }\n            feedbacks.push(await this.createFeedback(runId_, res.key, {\n                score: res.score,\n                value: res.value,\n                comment: res.comment,\n                correction: res.correction,\n                sourceInfo: sourceInfo_,\n                sourceRunId: res.sourceRunId,\n                feedbackConfig: res.feedbackConfig,\n                feedbackSourceType: \"model\",\n            }));\n        }\n        return [evalResults, feedbacks];\n    }\n    async logEvaluationFeedback(evaluatorResponse, run, sourceInfo) {\n        const [results] = await this._logEvaluationFeedback(evaluatorResponse, run, sourceInfo);\n        return results;\n    }\n    /**\n     * API for managing annotation queues\n     */\n    /**\n     * List the annotation queues on the LangSmith API.\n     * @param options - The options for listing annotation queues\n     * @param options.queueIds - The IDs of the queues to filter by\n     * @param options.name - The name of the queue to filter by\n     * @param options.nameContains - The substring that the queue name should contain\n     * @param options.limit - The maximum number of queues to return\n     * @returns An iterator of AnnotationQueue objects\n     */\n    async *listAnnotationQueues(options = {}) {\n        const { queueIds, name, nameContains, limit } = options;\n        const params = new URLSearchParams();\n        if (queueIds) {\n            queueIds.forEach((id, i) => {\n                assertUuid(id, `queueIds[${i}]`);\n                params.append(\"ids\", id);\n            });\n        }\n        if (name)\n            params.append(\"name\", name);\n        if (nameContains)\n            params.append(\"name_contains\", nameContains);\n        params.append(\"limit\", (limit !== undefined ? Math.min(limit, 100) : 100).toString());\n        let count = 0;\n        for await (const queues of this._getPaginated(\"/annotation-queues\", params)) {\n            yield* queues;\n            count++;\n            if (limit !== undefined && count >= limit)\n                break;\n        }\n    }\n    /**\n     * Create an annotation queue on the LangSmith API.\n     * @param options - The options for creating an annotation queue\n     * @param options.name - The name of the annotation queue\n     * @param options.description - The description of the annotation queue\n     * @param options.queueId - The ID of the annotation queue\n     * @returns The created AnnotationQueue object\n     */\n    async createAnnotationQueue(options) {\n        const { name, description, queueId } = options;\n        const body = {\n            name,\n            description,\n            id: queueId || uuid.v4(),\n        };\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/annotation-queues`, {\n            method: \"POST\",\n            headers: { ...this.headers, \"Content-Type\": \"application/json\" },\n            body: JSON.stringify(Object.fromEntries(Object.entries(body).filter(([_, v]) => v !== undefined))),\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, \"create annotation queue\");\n        const data = await response.json();\n        return data;\n    }\n    /**\n     * Read an annotation queue with the specified queue ID.\n     * @param queueId - The ID of the annotation queue to read\n     * @returns The AnnotationQueue object\n     */\n    async readAnnotationQueue(queueId) {\n        // TODO: Replace when actual endpoint is added\n        const queueIteratorResult = await this.listAnnotationQueues({\n            queueIds: [queueId],\n        }).next();\n        if (queueIteratorResult.done) {\n            throw new Error(`Annotation queue with ID ${queueId} not found`);\n        }\n        return queueIteratorResult.value;\n    }\n    /**\n     * Update an annotation queue with the specified queue ID.\n     * @param queueId - The ID of the annotation queue to update\n     * @param options - The options for updating the annotation queue\n     * @param options.name - The new name for the annotation queue\n     * @param options.description - The new description for the annotation queue\n     */\n    async updateAnnotationQueue(queueId, options) {\n        const { name, description } = options;\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/annotation-queues/${assertUuid(queueId, \"queueId\")}`, {\n            method: \"PATCH\",\n            headers: { ...this.headers, \"Content-Type\": \"application/json\" },\n            body: JSON.stringify({ name, description }),\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, \"update annotation queue\");\n    }\n    /**\n     * Delete an annotation queue with the specified queue ID.\n     * @param queueId - The ID of the annotation queue to delete\n     */\n    async deleteAnnotationQueue(queueId) {\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/annotation-queues/${assertUuid(queueId, \"queueId\")}`, {\n            method: \"DELETE\",\n            headers: { ...this.headers, Accept: \"application/json\" },\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, \"delete annotation queue\");\n    }\n    /**\n     * Add runs to an annotation queue with the specified queue ID.\n     * @param queueId - The ID of the annotation queue\n     * @param runIds - The IDs of the runs to be added to the annotation queue\n     */\n    async addRunsToAnnotationQueue(queueId, runIds) {\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/annotation-queues/${assertUuid(queueId, \"queueId\")}/runs`, {\n            method: \"POST\",\n            headers: { ...this.headers, \"Content-Type\": \"application/json\" },\n            body: JSON.stringify(runIds.map((id, i) => assertUuid(id, `runIds[${i}]`).toString())),\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, \"add runs to annotation queue\");\n    }\n    /**\n     * Get a run from an annotation queue at the specified index.\n     * @param queueId - The ID of the annotation queue\n     * @param index - The index of the run to retrieve\n     * @returns A Promise that resolves to a RunWithAnnotationQueueInfo object\n     * @throws {Error} If the run is not found at the given index or for other API-related errors\n     */\n    async getRunFromAnnotationQueue(queueId, index) {\n        const baseUrl = `/annotation-queues/${assertUuid(queueId, \"queueId\")}/run`;\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}${baseUrl}/${index}`, {\n            method: \"GET\",\n            headers: this.headers,\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, \"get run from annotation queue\");\n        return await response.json();\n    }\n    async _currentTenantIsOwner(owner) {\n        const settings = await this._getSettings();\n        return owner == \"-\" || settings.tenant_handle === owner;\n    }\n    async _ownerConflictError(action, owner) {\n        const settings = await this._getSettings();\n        return new Error(`Cannot ${action} for another tenant.\\n\n      Current tenant: ${settings.tenant_handle}\\n\n      Requested tenant: ${owner}`);\n    }\n    async _getLatestCommitHash(promptOwnerAndName) {\n        const res = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/commits/${promptOwnerAndName}/?limit=${1}&offset=${0}`, {\n            method: \"GET\",\n            headers: this.headers,\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        const json = await res.json();\n        if (!res.ok) {\n            const detail = typeof json.detail === \"string\"\n                ? json.detail\n                : JSON.stringify(json.detail);\n            const error = new Error(`Error ${res.status}: ${res.statusText}\\n${detail}`);\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            error.statusCode = res.status;\n            throw error;\n        }\n        if (json.commits.length === 0) {\n            return undefined;\n        }\n        return json.commits[0].commit_hash;\n    }\n    async _likeOrUnlikePrompt(promptIdentifier, like) {\n        const [owner, promptName, _] = parsePromptIdentifier(promptIdentifier);\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/likes/${owner}/${promptName}`, {\n            method: \"POST\",\n            body: JSON.stringify({ like: like }),\n            headers: { ...this.headers, \"Content-Type\": \"application/json\" },\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, `${like ? \"like\" : \"unlike\"} prompt`);\n        return await response.json();\n    }\n    async _getPromptUrl(promptIdentifier) {\n        const [owner, promptName, commitHash] = parsePromptIdentifier(promptIdentifier);\n        if (!(await this._currentTenantIsOwner(owner))) {\n            if (commitHash !== \"latest\") {\n                return `${this.getHostUrl()}/hub/${owner}/${promptName}/${commitHash.substring(0, 8)}`;\n            }\n            else {\n                return `${this.getHostUrl()}/hub/${owner}/${promptName}`;\n            }\n        }\n        else {\n            const settings = await this._getSettings();\n            if (commitHash !== \"latest\") {\n                return `${this.getHostUrl()}/prompts/${promptName}/${commitHash.substring(0, 8)}?organizationId=${settings.id}`;\n            }\n            else {\n                return `${this.getHostUrl()}/prompts/${promptName}?organizationId=${settings.id}`;\n            }\n        }\n    }\n    async promptExists(promptIdentifier) {\n        const prompt = await this.getPrompt(promptIdentifier);\n        return !!prompt;\n    }\n    async likePrompt(promptIdentifier) {\n        return this._likeOrUnlikePrompt(promptIdentifier, true);\n    }\n    async unlikePrompt(promptIdentifier) {\n        return this._likeOrUnlikePrompt(promptIdentifier, false);\n    }\n    async *listCommits(promptOwnerAndName) {\n        for await (const commits of this._getPaginated(`/commits/${promptOwnerAndName}/`, new URLSearchParams(), (res) => res.commits)) {\n            yield* commits;\n        }\n    }\n    async *listPrompts(options) {\n        const params = new URLSearchParams();\n        params.append(\"sort_field\", options?.sortField ?? \"updated_at\");\n        params.append(\"sort_direction\", \"desc\");\n        params.append(\"is_archived\", (!!options?.isArchived).toString());\n        if (options?.isPublic !== undefined) {\n            params.append(\"is_public\", options.isPublic.toString());\n        }\n        if (options?.query) {\n            params.append(\"query\", options.query);\n        }\n        for await (const prompts of this._getPaginated(\"/repos\", params, (res) => res.repos)) {\n            yield* prompts;\n        }\n    }\n    async getPrompt(promptIdentifier) {\n        const [owner, promptName, _] = parsePromptIdentifier(promptIdentifier);\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/repos/${owner}/${promptName}`, {\n            method: \"GET\",\n            headers: this.headers,\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        if (response.status === 404) {\n            return null;\n        }\n        await raiseForStatus(response, \"get prompt\");\n        const result = await response.json();\n        if (result.repo) {\n            return result.repo;\n        }\n        else {\n            return null;\n        }\n    }\n    async createPrompt(promptIdentifier, options) {\n        const settings = await this._getSettings();\n        if (options?.isPublic && !settings.tenant_handle) {\n            throw new Error(`Cannot create a public prompt without first\\n\n        creating a LangChain Hub handle. \n        You can add a handle by creating a public prompt at:\\n\n        https://smith.langchain.com/prompts`);\n        }\n        const [owner, promptName, _] = parsePromptIdentifier(promptIdentifier);\n        if (!(await this._currentTenantIsOwner(owner))) {\n            throw await this._ownerConflictError(\"create a prompt\", owner);\n        }\n        const data = {\n            repo_handle: promptName,\n            ...(options?.description && { description: options.description }),\n            ...(options?.readme && { readme: options.readme }),\n            ...(options?.tags && { tags: options.tags }),\n            is_public: !!options?.isPublic,\n        };\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/repos/`, {\n            method: \"POST\",\n            headers: { ...this.headers, \"Content-Type\": \"application/json\" },\n            body: JSON.stringify(data),\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, \"create prompt\");\n        const { repo } = await response.json();\n        return repo;\n    }\n    async createCommit(promptIdentifier, object, options) {\n        if (!(await this.promptExists(promptIdentifier))) {\n            throw new Error(\"Prompt does not exist, you must create it first.\");\n        }\n        const [owner, promptName, _] = parsePromptIdentifier(promptIdentifier);\n        const resolvedParentCommitHash = options?.parentCommitHash === \"latest\" || !options?.parentCommitHash\n            ? await this._getLatestCommitHash(`${owner}/${promptName}`)\n            : options?.parentCommitHash;\n        const payload = {\n            manifest: JSON.parse(JSON.stringify(object)),\n            parent_commit: resolvedParentCommitHash,\n        };\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/commits/${owner}/${promptName}`, {\n            method: \"POST\",\n            headers: { ...this.headers, \"Content-Type\": \"application/json\" },\n            body: JSON.stringify(payload),\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, \"create commit\");\n        const result = await response.json();\n        return this._getPromptUrl(`${owner}/${promptName}${result.commit_hash ? `:${result.commit_hash}` : \"\"}`);\n    }\n    async updatePrompt(promptIdentifier, options) {\n        if (!(await this.promptExists(promptIdentifier))) {\n            throw new Error(\"Prompt does not exist, you must create it first.\");\n        }\n        const [owner, promptName] = parsePromptIdentifier(promptIdentifier);\n        if (!(await this._currentTenantIsOwner(owner))) {\n            throw await this._ownerConflictError(\"update a prompt\", owner);\n        }\n        const payload = {};\n        if (options?.description !== undefined)\n            payload.description = options.description;\n        if (options?.readme !== undefined)\n            payload.readme = options.readme;\n        if (options?.tags !== undefined)\n            payload.tags = options.tags;\n        if (options?.isPublic !== undefined)\n            payload.is_public = options.isPublic;\n        if (options?.isArchived !== undefined)\n            payload.is_archived = options.isArchived;\n        // Check if payload is empty\n        if (Object.keys(payload).length === 0) {\n            throw new Error(\"No valid update options provided\");\n        }\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/repos/${owner}/${promptName}`, {\n            method: \"PATCH\",\n            body: JSON.stringify(payload),\n            headers: {\n                ...this.headers,\n                \"Content-Type\": \"application/json\",\n            },\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, \"update prompt\");\n        return response.json();\n    }\n    async deletePrompt(promptIdentifier) {\n        if (!(await this.promptExists(promptIdentifier))) {\n            throw new Error(\"Prompt does not exist, you must create it first.\");\n        }\n        const [owner, promptName, _] = parsePromptIdentifier(promptIdentifier);\n        if (!(await this._currentTenantIsOwner(owner))) {\n            throw await this._ownerConflictError(\"delete a prompt\", owner);\n        }\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/repos/${owner}/${promptName}`, {\n            method: \"DELETE\",\n            headers: this.headers,\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        return await response.json();\n    }\n    async pullPromptCommit(promptIdentifier, options) {\n        const [owner, promptName, commitHash] = parsePromptIdentifier(promptIdentifier);\n        const serverInfo = await this._getServerInfo();\n        const useOptimization = isVersionGreaterOrEqual(serverInfo.version, \"0.5.23\");\n        let passedCommitHash = commitHash;\n        if (!useOptimization && commitHash === \"latest\") {\n            const latestCommitHash = await this._getLatestCommitHash(`${owner}/${promptName}`);\n            if (!latestCommitHash) {\n                throw new Error(\"No commits found\");\n            }\n            else {\n                passedCommitHash = latestCommitHash;\n            }\n        }\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/commits/${owner}/${promptName}/${passedCommitHash}${options?.includeModel ? \"?include_model=true\" : \"\"}`, {\n            method: \"GET\",\n            headers: this.headers,\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, \"pull prompt commit\");\n        const result = await response.json();\n        return {\n            owner,\n            repo: promptName,\n            commit_hash: result.commit_hash,\n            manifest: result.manifest,\n            examples: result.examples,\n        };\n    }\n    /**\n     * This method should not be used directly, use `import { pull } from \"langchain/hub\"` instead.\n     * Using this method directly returns the JSON string of the prompt rather than a LangChain object.\n     * @private\n     */\n    async _pullPrompt(promptIdentifier, options) {\n        const promptObject = await this.pullPromptCommit(promptIdentifier, {\n            includeModel: options?.includeModel,\n        });\n        const prompt = JSON.stringify(promptObject.manifest);\n        return prompt;\n    }\n    async pushPrompt(promptIdentifier, options) {\n        // Create or update prompt metadata\n        if (await this.promptExists(promptIdentifier)) {\n            if (options && Object.keys(options).some((key) => key !== \"object\")) {\n                await this.updatePrompt(promptIdentifier, {\n                    description: options?.description,\n                    readme: options?.readme,\n                    tags: options?.tags,\n                    isPublic: options?.isPublic,\n                });\n            }\n        }\n        else {\n            await this.createPrompt(promptIdentifier, {\n                description: options?.description,\n                readme: options?.readme,\n                tags: options?.tags,\n                isPublic: options?.isPublic,\n            });\n        }\n        if (!options?.object) {\n            return await this._getPromptUrl(promptIdentifier);\n        }\n        // Create a commit with the new manifest\n        const url = await this.createCommit(promptIdentifier, options?.object, {\n            parentCommitHash: options?.parentCommitHash,\n        });\n        return url;\n    }\n    /**\n     * Clone a public dataset to your own langsmith tenant.\n     * This operation is idempotent. If you already have a dataset with the given name,\n     * this function will do nothing.\n  \n     * @param {string} tokenOrUrl The token of the public dataset to clone.\n     * @param {Object} [options] Additional options for cloning the dataset.\n     * @param {string} [options.sourceApiUrl] The URL of the langsmith server where the data is hosted. Defaults to the API URL of your current client.\n     * @param {string} [options.datasetName] The name of the dataset to create in your tenant. Defaults to the name of the public dataset.\n     * @returns {Promise<void>}\n     */\n    async clonePublicDataset(tokenOrUrl, options = {}) {\n        const { sourceApiUrl = this.apiUrl, datasetName } = options;\n        const [parsedApiUrl, tokenUuid] = this.parseTokenOrUrl(tokenOrUrl, sourceApiUrl);\n        const sourceClient = new Client({\n            apiUrl: parsedApiUrl,\n            // Placeholder API key not needed anymore in most cases, but\n            // some private deployments may have API key-based rate limiting\n            // that would cause this to fail if we provide no value.\n            apiKey: \"placeholder\",\n        });\n        const ds = await sourceClient.readSharedDataset(tokenUuid);\n        const finalDatasetName = datasetName || ds.name;\n        try {\n            if (await this.hasDataset({ datasetId: finalDatasetName })) {\n                console.log(`Dataset ${finalDatasetName} already exists in your tenant. Skipping.`);\n                return;\n            }\n        }\n        catch (_) {\n            // `.hasDataset` will throw an error if the dataset does not exist.\n            // no-op in that case\n        }\n        // Fetch examples first, then create the dataset\n        const examples = await sourceClient.listSharedExamples(tokenUuid);\n        const dataset = await this.createDataset(finalDatasetName, {\n            description: ds.description,\n            dataType: ds.data_type || \"kv\",\n            inputsSchema: ds.inputs_schema_definition ?? undefined,\n            outputsSchema: ds.outputs_schema_definition ?? undefined,\n        });\n        try {\n            await this.createExamples({\n                inputs: examples.map((e) => e.inputs),\n                outputs: examples.flatMap((e) => (e.outputs ? [e.outputs] : [])),\n                datasetId: dataset.id,\n            });\n        }\n        catch (e) {\n            console.error(`An error occurred while creating dataset ${finalDatasetName}. ` +\n                \"You should delete it manually.\");\n            throw e;\n        }\n    }\n    parseTokenOrUrl(urlOrToken, apiUrl, numParts = 2, kind = \"dataset\") {\n        // Try parsing as UUID\n        try {\n            assertUuid(urlOrToken); // Will throw if it's not a UUID.\n            return [apiUrl, urlOrToken];\n        }\n        catch (_) {\n            // no-op if it's not a uuid\n        }\n        // Parse as URL\n        try {\n            const parsedUrl = new URL(urlOrToken);\n            const pathParts = parsedUrl.pathname\n                .split(\"/\")\n                .filter((part) => part !== \"\");\n            if (pathParts.length >= numParts) {\n                const tokenUuid = pathParts[pathParts.length - numParts];\n                return [apiUrl, tokenUuid];\n            }\n            else {\n                throw new Error(`Invalid public ${kind} URL: ${urlOrToken}`);\n            }\n        }\n        catch (error) {\n            throw new Error(`Invalid public ${kind} URL or token: ${urlOrToken}`);\n        }\n    }\n    /**\n     * Awaits all pending trace batches. Useful for environments where\n     * you need to be sure that all tracing requests finish before execution ends,\n     * such as serverless environments.\n     *\n     * @example\n     * ```\n     * import { Client } from \"langsmith\";\n     *\n     * const client = new Client();\n     *\n     * try {\n     *   // Tracing happens here\n     *   ...\n     * } finally {\n     *   await client.awaitPendingTraceBatches();\n     * }\n     * ```\n     *\n     * @returns A promise that resolves once all currently pending traces have sent.\n     */\n    awaitPendingTraceBatches() {\n        return Promise.all([\n            ...this.autoBatchQueue.items.map(({ itemPromise }) => itemPromise),\n            this.batchIngestCaller.queue.onIdle(),\n        ]);\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 3507, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3524, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/node_modules/langsmith/dist/utils/env.js"],"sourcesContent":["// Inlined from https://github.com/flexdinesh/browser-or-node\nimport { __version__ } from \"../index.js\";\nlet globalEnv;\nexport const isBrowser = () => typeof window !== \"undefined\" && typeof window.document !== \"undefined\";\nexport const isWebWorker = () => typeof globalThis === \"object\" &&\n    globalThis.constructor &&\n    globalThis.constructor.name === \"DedicatedWorkerGlobalScope\";\nexport const isJsDom = () => (typeof window !== \"undefined\" && window.name === \"nodejs\") ||\n    (typeof navigator !== \"undefined\" &&\n        (navigator.userAgent.includes(\"Node.js\") ||\n            navigator.userAgent.includes(\"jsdom\")));\n// Supabase Edge Function provides a `Deno` global object\n// without `version` property\nexport const isDeno = () => typeof Deno !== \"undefined\";\n// Mark not-as-node if in Supabase Edge Function\nexport const isNode = () => typeof process !== \"undefined\" &&\n    typeof process.versions !== \"undefined\" &&\n    typeof process.versions.node !== \"undefined\" &&\n    !isDeno();\nexport const getEnv = () => {\n    if (globalEnv) {\n        return globalEnv;\n    }\n    if (isBrowser()) {\n        globalEnv = \"browser\";\n    }\n    else if (isNode()) {\n        globalEnv = \"node\";\n    }\n    else if (isWebWorker()) {\n        globalEnv = \"webworker\";\n    }\n    else if (isJsDom()) {\n        globalEnv = \"jsdom\";\n    }\n    else if (isDeno()) {\n        globalEnv = \"deno\";\n    }\n    else {\n        globalEnv = \"other\";\n    }\n    return globalEnv;\n};\nlet runtimeEnvironment;\nexport function getRuntimeEnvironment() {\n    if (runtimeEnvironment === undefined) {\n        const env = getEnv();\n        const releaseEnv = getShas();\n        runtimeEnvironment = {\n            library: \"langsmith\",\n            runtime: env,\n            sdk: \"langsmith-js\",\n            sdk_version: __version__,\n            ...releaseEnv,\n        };\n    }\n    return runtimeEnvironment;\n}\n/**\n * Retrieves the LangChain-specific environment variables from the current runtime environment.\n * Sensitive keys (containing the word \"key\", \"token\", or \"secret\") have their values redacted for security.\n *\n * @returns {Record<string, string>}\n *  - A record of LangChain-specific environment variables.\n */\nexport function getLangChainEnvVars() {\n    const allEnvVars = getEnvironmentVariables() || {};\n    const envVars = {};\n    for (const [key, value] of Object.entries(allEnvVars)) {\n        if (key.startsWith(\"LANGCHAIN_\") && typeof value === \"string\") {\n            envVars[key] = value;\n        }\n    }\n    for (const key in envVars) {\n        if ((key.toLowerCase().includes(\"key\") ||\n            key.toLowerCase().includes(\"secret\") ||\n            key.toLowerCase().includes(\"token\")) &&\n            typeof envVars[key] === \"string\") {\n            const value = envVars[key];\n            envVars[key] =\n                value.slice(0, 2) + \"*\".repeat(value.length - 4) + value.slice(-2);\n        }\n    }\n    return envVars;\n}\n/**\n * Retrieves the LangChain-specific metadata from the current runtime environment.\n *\n * @returns {Record<string, string>}\n *  - A record of LangChain-specific metadata environment variables.\n */\nexport function getLangChainEnvVarsMetadata() {\n    const allEnvVars = getEnvironmentVariables() || {};\n    const envVars = {};\n    const excluded = [\n        \"LANGCHAIN_API_KEY\",\n        \"LANGCHAIN_ENDPOINT\",\n        \"LANGCHAIN_TRACING_V2\",\n        \"LANGCHAIN_PROJECT\",\n        \"LANGCHAIN_SESSION\",\n    ];\n    for (const [key, value] of Object.entries(allEnvVars)) {\n        if (key.startsWith(\"LANGCHAIN_\") &&\n            typeof value === \"string\" &&\n            !excluded.includes(key) &&\n            !key.toLowerCase().includes(\"key\") &&\n            !key.toLowerCase().includes(\"secret\") &&\n            !key.toLowerCase().includes(\"token\")) {\n            if (key === \"LANGCHAIN_REVISION_ID\") {\n                envVars[\"revision_id\"] = value;\n            }\n            else {\n                envVars[key] = value;\n            }\n        }\n    }\n    return envVars;\n}\n/**\n * Retrieves the environment variables from the current runtime environment.\n *\n * This function is designed to operate in a variety of JS environments,\n * including Node.js, Deno, browsers, etc.\n *\n * @returns {Record<string, string> | undefined}\n *  - A record of environment variables if available.\n *  - `undefined` if the environment does not support or allows access to environment variables.\n */\nexport function getEnvironmentVariables() {\n    try {\n        // Check for Node.js environment\n        // eslint-disable-next-line no-process-env\n        if (typeof process !== \"undefined\" && process.env) {\n            // eslint-disable-next-line no-process-env\n            return Object.entries(process.env).reduce((acc, [key, value]) => {\n                acc[key] = String(value);\n                return acc;\n            }, {});\n        }\n        // For browsers and other environments, we may not have direct access to env variables\n        // Return undefined or any other fallback as required.\n        return undefined;\n    }\n    catch (e) {\n        // Catch any errors that might occur while trying to access environment variables\n        return undefined;\n    }\n}\nexport function getEnvironmentVariable(name) {\n    // Certain Deno setups will throw an error if you try to access environment variables\n    // https://github.com/hwchase17/langchainjs/issues/1412\n    try {\n        return typeof process !== \"undefined\"\n            ? // eslint-disable-next-line no-process-env\n                process.env?.[name]\n            : undefined;\n    }\n    catch (e) {\n        return undefined;\n    }\n}\nexport function getLangSmithEnvironmentVariable(name) {\n    return (getEnvironmentVariable(`LANGSMITH_${name}`) ||\n        getEnvironmentVariable(`LANGCHAIN_${name}`));\n}\nexport function setEnvironmentVariable(name, value) {\n    if (typeof process !== \"undefined\") {\n        // eslint-disable-next-line no-process-env\n        process.env[name] = value;\n    }\n}\nlet cachedCommitSHAs;\n/**\n * Get the Git commit SHA from common environment variables\n * used by different CI/CD platforms.\n * @returns {string | undefined} The Git commit SHA or undefined if not found.\n */\nexport function getShas() {\n    if (cachedCommitSHAs !== undefined) {\n        return cachedCommitSHAs;\n    }\n    const common_release_envs = [\n        \"VERCEL_GIT_COMMIT_SHA\",\n        \"NEXT_PUBLIC_VERCEL_GIT_COMMIT_SHA\",\n        \"COMMIT_REF\",\n        \"RENDER_GIT_COMMIT\",\n        \"CI_COMMIT_SHA\",\n        \"CIRCLE_SHA1\",\n        \"CF_PAGES_COMMIT_SHA\",\n        \"REACT_APP_GIT_SHA\",\n        \"SOURCE_VERSION\",\n        \"GITHUB_SHA\",\n        \"TRAVIS_COMMIT\",\n        \"GIT_COMMIT\",\n        \"BUILD_VCS_NUMBER\",\n        \"bamboo_planRepository_revision\",\n        \"Build.SourceVersion\",\n        \"BITBUCKET_COMMIT\",\n        \"DRONE_COMMIT_SHA\",\n        \"SEMAPHORE_GIT_SHA\",\n        \"BUILDKITE_COMMIT\",\n    ];\n    const shas = {};\n    for (const env of common_release_envs) {\n        const envVar = getEnvironmentVariable(env);\n        if (envVar !== undefined) {\n            shas[env] = envVar;\n        }\n    }\n    cachedCommitSHAs = shas;\n    return shas;\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 3694, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3700, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/node_modules/langsmith/dist/env.js"],"sourcesContent":["import { getLangSmithEnvironmentVariable } from \"./utils/env.js\";\nexport const isTracingEnabled = (tracingEnabled) => {\n    if (tracingEnabled !== undefined) {\n        return tracingEnabled;\n    }\n    const envVars = [\"TRACING_V2\", \"TRACING\"];\n    return !!envVars.find((envVar) => getLangSmithEnvironmentVariable(envVar) === \"true\");\n};\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,mBAAmB,CAAC;IAC7B,IAAI,mBAAmB,WAAW;QAC9B,OAAO;IACX;IACA,MAAM,UAAU;QAAC;QAAc;KAAU;IACzC,OAAO,CAAC,CAAC,QAAQ,IAAI,CAAC,CAAC,SAAW,CAAA,GAAA,mJAAA,CAAA,kCAA+B,AAAD,EAAE,YAAY;AAClF","ignoreList":[0]}},
    {"offset": {"line": 3715, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3721, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/node_modules/langsmith/dist/singletons/constants.js"],"sourcesContent":["export const _LC_CONTEXT_VARIABLES_KEY = Symbol.for(\"lc:context_variables\");\n"],"names":[],"mappings":";;;AAAO,MAAM,4BAA4B,OAAO,GAAG,CAAC","ignoreList":[0]}},
    {"offset": {"line": 3725, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3731, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/node_modules/langsmith/dist/run_trees.js"],"sourcesContent":["import * as uuid from \"uuid\";\nimport { getEnvironmentVariable, getRuntimeEnvironment, } from \"./utils/env.js\";\nimport { Client } from \"./client.js\";\nimport { isTracingEnabled } from \"./env.js\";\nimport { warnOnce } from \"./utils/warn.js\";\nimport { _LC_CONTEXT_VARIABLES_KEY } from \"./singletons/constants.js\";\nfunction stripNonAlphanumeric(input) {\n    return input.replace(/[-:.]/g, \"\");\n}\nexport function convertToDottedOrderFormat(epoch, runId, executionOrder = 1) {\n    // Date only has millisecond precision, so we use the microseconds to break\n    // possible ties, avoiding incorrect run order\n    const paddedOrder = executionOrder.toFixed(0).slice(0, 3).padStart(3, \"0\");\n    return (stripNonAlphanumeric(`${new Date(epoch).toISOString().slice(0, -1)}${paddedOrder}Z`) + runId);\n}\n/**\n * Baggage header information\n */\nclass Baggage {\n    constructor(metadata, tags) {\n        Object.defineProperty(this, \"metadata\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"tags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.metadata = metadata;\n        this.tags = tags;\n    }\n    static fromHeader(value) {\n        const items = value.split(\",\");\n        let metadata = {};\n        let tags = [];\n        for (const item of items) {\n            const [key, uriValue] = item.split(\"=\");\n            const value = decodeURIComponent(uriValue);\n            if (key === \"langsmith-metadata\") {\n                metadata = JSON.parse(value);\n            }\n            else if (key === \"langsmith-tags\") {\n                tags = value.split(\",\");\n            }\n        }\n        return new Baggage(metadata, tags);\n    }\n    toHeader() {\n        const items = [];\n        if (this.metadata && Object.keys(this.metadata).length > 0) {\n            items.push(`langsmith-metadata=${encodeURIComponent(JSON.stringify(this.metadata))}`);\n        }\n        if (this.tags && this.tags.length > 0) {\n            items.push(`langsmith-tags=${encodeURIComponent(this.tags.join(\",\"))}`);\n        }\n        return items.join(\",\");\n    }\n}\nexport class RunTree {\n    constructor(originalConfig) {\n        Object.defineProperty(this, \"id\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"run_type\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"project_name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"parent_run\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"child_runs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"start_time\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"end_time\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"extra\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"tags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"error\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"serialized\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"inputs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"outputs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"reference_example_id\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"client\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"events\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"trace_id\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"dotted_order\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"tracingEnabled\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"execution_order\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"child_execution_order\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        // If you pass in a run tree directly, return a shallow clone\n        if (isRunTree(originalConfig)) {\n            Object.assign(this, { ...originalConfig });\n            return;\n        }\n        const defaultConfig = RunTree.getDefaultConfig();\n        const { metadata, ...config } = originalConfig;\n        const client = config.client ?? RunTree.getSharedClient();\n        const dedupedMetadata = {\n            ...metadata,\n            ...config?.extra?.metadata,\n        };\n        config.extra = { ...config.extra, metadata: dedupedMetadata };\n        Object.assign(this, { ...defaultConfig, ...config, client });\n        if (!this.trace_id) {\n            if (this.parent_run) {\n                this.trace_id = this.parent_run.trace_id ?? this.id;\n            }\n            else {\n                this.trace_id = this.id;\n            }\n        }\n        this.execution_order ??= 1;\n        this.child_execution_order ??= 1;\n        if (!this.dotted_order) {\n            const currentDottedOrder = convertToDottedOrderFormat(this.start_time, this.id, this.execution_order);\n            if (this.parent_run) {\n                this.dotted_order =\n                    this.parent_run.dotted_order + \".\" + currentDottedOrder;\n            }\n            else {\n                this.dotted_order = currentDottedOrder;\n            }\n        }\n    }\n    static getDefaultConfig() {\n        return {\n            id: uuid.v4(),\n            run_type: \"chain\",\n            project_name: getEnvironmentVariable(\"LANGCHAIN_PROJECT\") ??\n                getEnvironmentVariable(\"LANGCHAIN_SESSION\") ?? // TODO: Deprecate\n                \"default\",\n            child_runs: [],\n            api_url: getEnvironmentVariable(\"LANGCHAIN_ENDPOINT\") ?? \"http://localhost:1984\",\n            api_key: getEnvironmentVariable(\"LANGCHAIN_API_KEY\"),\n            caller_options: {},\n            start_time: Date.now(),\n            serialized: {},\n            inputs: {},\n            extra: {},\n        };\n    }\n    static getSharedClient() {\n        if (!RunTree.sharedClient) {\n            RunTree.sharedClient = new Client();\n        }\n        return RunTree.sharedClient;\n    }\n    createChild(config) {\n        const child_execution_order = this.child_execution_order + 1;\n        const child = new RunTree({\n            ...config,\n            parent_run: this,\n            project_name: this.project_name,\n            client: this.client,\n            tracingEnabled: this.tracingEnabled,\n            execution_order: child_execution_order,\n            child_execution_order: child_execution_order,\n        });\n        // Copy context vars over into the new run tree.\n        if (_LC_CONTEXT_VARIABLES_KEY in this) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            child[_LC_CONTEXT_VARIABLES_KEY] =\n                this[_LC_CONTEXT_VARIABLES_KEY];\n        }\n        const LC_CHILD = Symbol.for(\"lc:child_config\");\n        const presentConfig = config.extra?.[LC_CHILD] ??\n            this.extra[LC_CHILD];\n        // tracing for LangChain is defined by the _parentRunId and runMap of the tracer\n        if (isRunnableConfigLike(presentConfig)) {\n            const newConfig = { ...presentConfig };\n            const callbacks = isCallbackManagerLike(newConfig.callbacks)\n                ? newConfig.callbacks.copy?.()\n                : undefined;\n            if (callbacks) {\n                // update the parent run id\n                Object.assign(callbacks, { _parentRunId: child.id });\n                // only populate if we're in a newer LC.JS version\n                callbacks.handlers\n                    ?.find(isLangChainTracerLike)\n                    ?.updateFromRunTree?.(child);\n                newConfig.callbacks = callbacks;\n            }\n            child.extra[LC_CHILD] = newConfig;\n        }\n        // propagate child_execution_order upwards\n        const visited = new Set();\n        let current = this;\n        while (current != null && !visited.has(current.id)) {\n            visited.add(current.id);\n            current.child_execution_order = Math.max(current.child_execution_order, child_execution_order);\n            current = current.parent_run;\n        }\n        this.child_runs.push(child);\n        return child;\n    }\n    async end(outputs, error, endTime = Date.now(), metadata) {\n        this.outputs = this.outputs ?? outputs;\n        this.error = this.error ?? error;\n        this.end_time = this.end_time ?? endTime;\n        if (metadata && Object.keys(metadata).length > 0) {\n            this.extra = this.extra\n                ? { ...this.extra, metadata: { ...this.extra.metadata, ...metadata } }\n                : { metadata };\n        }\n    }\n    _convertToCreate(run, runtimeEnv, excludeChildRuns = true) {\n        const runExtra = run.extra ?? {};\n        if (!runExtra.runtime) {\n            runExtra.runtime = {};\n        }\n        if (runtimeEnv) {\n            for (const [k, v] of Object.entries(runtimeEnv)) {\n                if (!runExtra.runtime[k]) {\n                    runExtra.runtime[k] = v;\n                }\n            }\n        }\n        let child_runs;\n        let parent_run_id;\n        if (!excludeChildRuns) {\n            child_runs = run.child_runs.map((child_run) => this._convertToCreate(child_run, runtimeEnv, excludeChildRuns));\n            parent_run_id = undefined;\n        }\n        else {\n            parent_run_id = run.parent_run?.id;\n            child_runs = [];\n        }\n        const persistedRun = {\n            id: run.id,\n            name: run.name,\n            start_time: run.start_time,\n            end_time: run.end_time,\n            run_type: run.run_type,\n            reference_example_id: run.reference_example_id,\n            extra: runExtra,\n            serialized: run.serialized,\n            error: run.error,\n            inputs: run.inputs,\n            outputs: run.outputs,\n            session_name: run.project_name,\n            child_runs: child_runs,\n            parent_run_id: parent_run_id,\n            trace_id: run.trace_id,\n            dotted_order: run.dotted_order,\n            tags: run.tags,\n        };\n        return persistedRun;\n    }\n    async postRun(excludeChildRuns = true) {\n        try {\n            const runtimeEnv = getRuntimeEnvironment();\n            const runCreate = await this._convertToCreate(this, runtimeEnv, true);\n            await this.client.createRun(runCreate);\n            if (!excludeChildRuns) {\n                warnOnce(\"Posting with excludeChildRuns=false is deprecated and will be removed in a future version.\");\n                for (const childRun of this.child_runs) {\n                    await childRun.postRun(false);\n                }\n            }\n        }\n        catch (error) {\n            console.error(`Error in postRun for run ${this.id}:`, error);\n        }\n    }\n    async patchRun() {\n        try {\n            const runUpdate = {\n                end_time: this.end_time,\n                error: this.error,\n                inputs: this.inputs,\n                outputs: this.outputs,\n                parent_run_id: this.parent_run?.id,\n                reference_example_id: this.reference_example_id,\n                extra: this.extra,\n                events: this.events,\n                dotted_order: this.dotted_order,\n                trace_id: this.trace_id,\n                tags: this.tags,\n            };\n            await this.client.updateRun(this.id, runUpdate);\n        }\n        catch (error) {\n            console.error(`Error in patchRun for run ${this.id}`, error);\n        }\n    }\n    toJSON() {\n        return this._convertToCreate(this, undefined, false);\n    }\n    static fromRunnableConfig(parentConfig, props) {\n        // We only handle the callback manager case for now\n        const callbackManager = parentConfig?.callbacks;\n        let parentRun;\n        let projectName;\n        let client;\n        let tracingEnabled = isTracingEnabled();\n        if (callbackManager) {\n            const parentRunId = callbackManager?.getParentRunId?.() ?? \"\";\n            const langChainTracer = callbackManager?.handlers?.find((handler) => handler?.name == \"langchain_tracer\");\n            parentRun = langChainTracer?.getRun?.(parentRunId);\n            projectName = langChainTracer?.projectName;\n            client = langChainTracer?.client;\n            tracingEnabled = tracingEnabled || !!langChainTracer;\n        }\n        if (!parentRun) {\n            return new RunTree({\n                ...props,\n                client,\n                tracingEnabled,\n                project_name: projectName,\n            });\n        }\n        const parentRunTree = new RunTree({\n            name: parentRun.name,\n            id: parentRun.id,\n            trace_id: parentRun.trace_id,\n            dotted_order: parentRun.dotted_order,\n            client,\n            tracingEnabled,\n            project_name: projectName,\n            tags: [\n                ...new Set((parentRun?.tags ?? []).concat(parentConfig?.tags ?? [])),\n            ],\n            extra: {\n                metadata: {\n                    ...parentRun?.extra?.metadata,\n                    ...parentConfig?.metadata,\n                },\n            },\n        });\n        return parentRunTree.createChild(props);\n    }\n    static fromDottedOrder(dottedOrder) {\n        return this.fromHeaders({ \"langsmith-trace\": dottedOrder });\n    }\n    static fromHeaders(headers, inheritArgs) {\n        const rawHeaders = \"get\" in headers && typeof headers.get === \"function\"\n            ? {\n                \"langsmith-trace\": headers.get(\"langsmith-trace\"),\n                baggage: headers.get(\"baggage\"),\n            }\n            : headers;\n        const headerTrace = rawHeaders[\"langsmith-trace\"];\n        if (!headerTrace || typeof headerTrace !== \"string\")\n            return undefined;\n        const parentDottedOrder = headerTrace.trim();\n        const parsedDottedOrder = parentDottedOrder.split(\".\").map((part) => {\n            const [strTime, uuid] = part.split(\"Z\");\n            return { strTime, time: Date.parse(strTime + \"Z\"), uuid };\n        });\n        const traceId = parsedDottedOrder[0].uuid;\n        const config = {\n            ...inheritArgs,\n            name: inheritArgs?.[\"name\"] ?? \"parent\",\n            run_type: inheritArgs?.[\"run_type\"] ?? \"chain\",\n            start_time: inheritArgs?.[\"start_time\"] ?? Date.now(),\n            id: parsedDottedOrder.at(-1)?.uuid,\n            trace_id: traceId,\n            dotted_order: parentDottedOrder,\n        };\n        if (rawHeaders[\"baggage\"] && typeof rawHeaders[\"baggage\"] === \"string\") {\n            const baggage = Baggage.fromHeader(rawHeaders[\"baggage\"]);\n            config.metadata = baggage.metadata;\n            config.tags = baggage.tags;\n        }\n        return new RunTree(config);\n    }\n    toHeaders(headers) {\n        const result = {\n            \"langsmith-trace\": this.dotted_order,\n            baggage: new Baggage(this.extra?.metadata, this.tags).toHeader(),\n        };\n        if (headers) {\n            for (const [key, value] of Object.entries(result)) {\n                headers.set(key, value);\n            }\n        }\n        return result;\n    }\n}\nObject.defineProperty(RunTree, \"sharedClient\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: null\n});\nexport function isRunTree(x) {\n    return (x !== undefined &&\n        typeof x.createChild === \"function\" &&\n        typeof x.postRun === \"function\");\n}\nfunction isLangChainTracerLike(x) {\n    return (typeof x === \"object\" &&\n        x != null &&\n        typeof x.name === \"string\" &&\n        x.name === \"langchain_tracer\");\n}\nfunction containsLangChainTracerLike(x) {\n    return (Array.isArray(x) && x.some((callback) => isLangChainTracerLike(callback)));\n}\nfunction isCallbackManagerLike(x) {\n    return (typeof x === \"object\" &&\n        x != null &&\n        Array.isArray(x.handlers));\n}\nexport function isRunnableConfigLike(x) {\n    // Check that it's an object with a callbacks arg\n    // that has either a CallbackManagerLike object with a langchain tracer within it\n    // or an array with a LangChainTracerLike object within it\n    return (x !== undefined &&\n        typeof x.callbacks === \"object\" &&\n        // Callback manager with a langchain tracer\n        (containsLangChainTracerLike(x.callbacks?.handlers) ||\n            // Or it's an array with a LangChainTracerLike object within it\n            containsLangChainTracerLike(x.callbacks)));\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 4262, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4268, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/node_modules/langsmith/dist/singletons/traceable.js"],"sourcesContent":["import { isRunTree } from \"../run_trees.js\";\nclass MockAsyncLocalStorage {\n    getStore() {\n        return undefined;\n    }\n    run(_, callback) {\n        return callback();\n    }\n}\nconst TRACING_ALS_KEY = Symbol.for(\"ls:tracing_async_local_storage\");\nconst mockAsyncLocalStorage = new MockAsyncLocalStorage();\nclass AsyncLocalStorageProvider {\n    getInstance() {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return globalThis[TRACING_ALS_KEY] ?? mockAsyncLocalStorage;\n    }\n    initializeGlobalInstance(instance) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        if (globalThis[TRACING_ALS_KEY] === undefined) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            globalThis[TRACING_ALS_KEY] = instance;\n        }\n    }\n}\nexport const AsyncLocalStorageProviderSingleton = new AsyncLocalStorageProvider();\n/**\n * Return the current run tree from within a traceable-wrapped function.\n * Will throw an error if called outside of a traceable function.\n *\n * @returns The run tree for the given context.\n */\nexport const getCurrentRunTree = () => {\n    const runTree = AsyncLocalStorageProviderSingleton.getInstance().getStore();\n    if (!isRunTree(runTree)) {\n        throw new Error([\n            \"Could not get the current run tree.\",\n            \"\",\n            \"Please make sure you are calling this method within a traceable function or the tracing is enabled.\",\n        ].join(\"\\n\"));\n    }\n    return runTree;\n};\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function withRunTree(runTree, fn) {\n    const storage = AsyncLocalStorageProviderSingleton.getInstance();\n    return new Promise((resolve, reject) => {\n        storage.run(runTree, () => void Promise.resolve(fn()).then(resolve).catch(reject));\n    });\n}\nexport const ROOT = Symbol.for(\"langsmith:traceable:root\");\nexport function isTraceableFunction(x\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n) {\n    return typeof x === \"function\" && \"langsmith:traceable\" in x;\n}\n"],"names":[],"mappings":";;;;;;;AAAA;;AACA,MAAM;IACF,WAAW;QACP,OAAO;IACX;IACA,IAAI,CAAC,EAAE,QAAQ,EAAE;QACb,OAAO;IACX;AACJ;AACA,MAAM,kBAAkB,OAAO,GAAG,CAAC;AACnC,MAAM,wBAAwB,IAAI;AAClC,MAAM;IACF,cAAc;QACV,8DAA8D;QAC9D,OAAO,UAAU,CAAC,gBAAgB,IAAI;IAC1C;IACA,yBAAyB,QAAQ,EAAE;QAC/B,8DAA8D;QAC9D,IAAI,UAAU,CAAC,gBAAgB,KAAK,WAAW;YAC3C,8DAA8D;YAC9D,UAAU,CAAC,gBAAgB,GAAG;QAClC;IACJ;AACJ;AACO,MAAM,qCAAqC,IAAI;AAO/C,MAAM,oBAAoB;IAC7B,MAAM,UAAU,mCAAmC,WAAW,GAAG,QAAQ;IACzE,IAAI,CAAC,CAAA,GAAA,gJAAA,CAAA,YAAS,AAAD,EAAE,UAAU;QACrB,MAAM,IAAI,MAAM;YACZ;YACA;YACA;SACH,CAAC,IAAI,CAAC;IACX;IACA,OAAO;AACX;AAEO,SAAS,YAAY,OAAO,EAAE,EAAE;IACnC,MAAM,UAAU,mCAAmC,WAAW;IAC9D,OAAO,IAAI,QAAQ,CAAC,SAAS;QACzB,QAAQ,GAAG,CAAC,SAAS,IAAM,KAAK,QAAQ,OAAO,CAAC,MAAM,IAAI,CAAC,SAAS,KAAK,CAAC;IAC9E;AACJ;AACO,MAAM,OAAO,OAAO,GAAG,CAAC;AACxB,SAAS,oBAAoB,CAAC;IAGjC,OAAO,OAAO,MAAM,cAAc,yBAAyB;AAC/D","ignoreList":[0]}},
    {"offset": {"line": 4322, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4328, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 4330, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4345, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 4347, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4362, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 4364, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}